# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DataExtractDefinition( version= "2",;
    datasets=nothing,
    timeSeriesTables=nothing,
    dataFormat=nothing,
    timeSeriesTableLayout=nothing,
    breakdownAndDataTypeLayout=nothing,
    shapefiles=nothing,
    geographicExtents=nothing,
    description=nothing,
    collection=nothing,
)
```
This function creates a definition object that is used for extracting data from an IPUMS dataset.


# Keyword Arguments

-`version::String` - What version of the IPUMS API to use (Default: `"2"`)

# Arguments

-`datasets::Dict{String, Dataset}`- A dictionary indicating the dataset to select
-`timeSeriesTables::Dict{String, TimeSeriesTable}`- An object where each key is the name of the requested time series table and each value is another object describing your selections for that time series table.
-`dataFormat::String`- The requested format of your data.Some examples are:
    - `"csv_no_header"` (default) includes only a minimal header in the first row

    - `"csv_header"` includes a second, more descriptive header row.

    - `"fixed_width"` provides data in a fixed width format.
-`timeSeriesTableLayout::String`- The layout of your time series table data. Some examples are:
    - `"time_by_column_layout"` (wide format, default): rows correspond to geographic units, columns correspond to different times in the time series.

    - `"time_by_row_layout"` (long format): rows correspond to a single geographic unit at a single point in time.

    - `"time_by_file_layout"`: data for different times are provided in separate files.
-`breakdownAndDataTypeLayout::String`-The layout of your dataset data when multiple data types or breakdown combos are present.
-`shapefiles::Vector{String}`- A list of selected shapefiles.
-`geographicExtents::Vector{String}`-A list of geographic_instances to use as extents for all datasets on this request.
-`description::String`- A short description of your extract.
-`collection::String`- What IPUMS collection to be queried for the extract (options could include "nhgis", "usa", etc. corresponding to IPUMS NHGIS or NHGIS USA databases).

# Returns

The function return a new definition object to extract data from IPUMS dataset.
    
# Examples

# References

To know more about `DataExtractDefinition` see:
* https://developer.ipums.org/docs/v2/workflows/create_extracts/microdata
"""
Base.@kwdef mutable struct DataExtractDefinition <: OpenAPI.APIModel
    datasets::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Dataset} }
    timeSeriesTables::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, TimeSeriesTable} }
    dataFormat::Union{Nothing, String} = nothing
    timeSeriesTableLayout::Union{Nothing, String} = nothing
    breakdownAndDataTypeLayout::Union{Nothing, String} = nothing
    shapefiles::Union{Nothing, Vector{String}} = nothing
    geographicExtents::Union{Nothing, Vector{String}} = nothing
    description::Union{Nothing, String} = nothing
    version::Union{Nothing, Int64} = nothing
    collection::Union{Nothing, String} = nothing

    function DataExtractDefinition(datasets, timeSeriesTables, dataFormat, timeSeriesTableLayout, breakdownAndDataTypeLayout, shapefiles, geographicExtents, description, version, collection, )
        OpenAPI.validate_property(DataExtractDefinition, Symbol("datasets"), datasets)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("timeSeriesTables"), timeSeriesTables)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("dataFormat"), dataFormat)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("timeSeriesTableLayout"), timeSeriesTableLayout)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("breakdownAndDataTypeLayout"), breakdownAndDataTypeLayout)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("shapefiles"), shapefiles)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("geographicExtents"), geographicExtents)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("description"), description)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("version"), version)
        OpenAPI.validate_property(DataExtractDefinition, Symbol("collection"), collection)
        return new(datasets, timeSeriesTables, dataFormat, timeSeriesTableLayout, breakdownAndDataTypeLayout, shapefiles, geographicExtents, description, version, collection, )
    end
end # type DataExtractDefinition

const _property_types_DataExtractDefinition = Dict{Symbol,String}(Symbol("datasets")=>"Dict{String, Dataset}", Symbol("timeSeriesTables")=>"Dict{String, TimeSeriesTable}", Symbol("dataFormat")=>"String", Symbol("timeSeriesTableLayout")=>"String", Symbol("breakdownAndDataTypeLayout")=>"String", Symbol("shapefiles")=>"Vector{String}", Symbol("geographicExtents")=>"Vector{String}", Symbol("description")=>"String", Symbol("version")=>"Int64", Symbol("collection")=>"String", )
OpenAPI.property_type(::Type{ DataExtractDefinition }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataExtractDefinition[name]))}

function check_required(o::DataExtractDefinition)
    true
end

function OpenAPI.validate_property(::Type{ DataExtractDefinition }, name::Symbol, val)
    if name === Symbol("dataFormat")
        OpenAPI.validate_param(name, "DataExtractDefinition", :enum, val, ["csv_no_header", "csv_header", "fixed_width"])
    end
    if name === Symbol("timeSeriesTableLayout")
        OpenAPI.validate_param(name, "DataExtractDefinition", :enum, val, ["time_by_column_layout", "time_by_row_layout", "time_by_file_layout"])
    end
    if name === Symbol("breakdownAndDataTypeLayout")
        OpenAPI.validate_param(name, "DataExtractDefinition", :enum, val, ["separate_files", "single_file"])
    end
    if name === Symbol("version")
        OpenAPI.validate_param(name, "DataExtractDefinition", :format, val, "int32")
    end
end
