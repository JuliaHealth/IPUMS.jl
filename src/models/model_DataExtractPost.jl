# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DataExtractPost

    DataExtractPost(;
        datasets=nothing,
        timeSeriesTables=nothing,
        dataFormat=nothing,
        timeSeriesTableLayout=nothing,
        breakdownAndDataTypeLayout=nothing,
        shapefiles=nothing,
        geographicExtents=nothing,
        description=nothing,
    )

    - datasets::Dict{String, Dataset}
    - timeSeriesTables::Dict{String, TimeSeriesTable}
    - dataFormat::String
    - timeSeriesTableLayout::String
    - breakdownAndDataTypeLayout::String
    - shapefiles::Vector{String}
    - geographicExtents::Vector{String}
    - description::String
"""
Base.@kwdef mutable struct DataExtractPost <: OpenAPI.APIModel
    datasets::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Dataset} }
    timeSeriesTables::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, TimeSeriesTable} }
    dataFormat::Union{Nothing, String} = nothing
    timeSeriesTableLayout::Union{Nothing, String} = nothing
    breakdownAndDataTypeLayout::Union{Nothing, String} = nothing
    shapefiles::Union{Nothing, Vector{String}} = nothing
    geographicExtents::Union{Nothing, Vector{String}} = nothing
    description::Union{Nothing, String} = nothing

    function DataExtractPost(datasets, timeSeriesTables, dataFormat, timeSeriesTableLayout, breakdownAndDataTypeLayout, shapefiles, geographicExtents, description, )
        OpenAPI.validate_property(DataExtractPost, Symbol("datasets"), datasets)
        OpenAPI.validate_property(DataExtractPost, Symbol("timeSeriesTables"), timeSeriesTables)
        OpenAPI.validate_property(DataExtractPost, Symbol("dataFormat"), dataFormat)
        OpenAPI.validate_property(DataExtractPost, Symbol("timeSeriesTableLayout"), timeSeriesTableLayout)
        OpenAPI.validate_property(DataExtractPost, Symbol("breakdownAndDataTypeLayout"), breakdownAndDataTypeLayout)
        OpenAPI.validate_property(DataExtractPost, Symbol("shapefiles"), shapefiles)
        OpenAPI.validate_property(DataExtractPost, Symbol("geographicExtents"), geographicExtents)
        OpenAPI.validate_property(DataExtractPost, Symbol("description"), description)
        return new(datasets, timeSeriesTables, dataFormat, timeSeriesTableLayout, breakdownAndDataTypeLayout, shapefiles, geographicExtents, description, )
    end
end # type DataExtractPost

const _property_types_DataExtractPost = Dict{Symbol,String}(Symbol("datasets")=>"Dict{String, Dataset}", Symbol("timeSeriesTables")=>"Dict{String, TimeSeriesTable}", Symbol("dataFormat")=>"String", Symbol("timeSeriesTableLayout")=>"String", Symbol("breakdownAndDataTypeLayout")=>"String", Symbol("shapefiles")=>"Vector{String}", Symbol("geographicExtents")=>"Vector{String}", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ DataExtractPost }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataExtractPost[name]))}

function check_required(o::DataExtractPost)
    true
end

function OpenAPI.validate_property(::Type{ DataExtractPost }, name::Symbol, val)
    if name === Symbol("dataFormat")
        OpenAPI.validate_param(name, "DataExtractPost", :enum, val, ["csv_no_header", "csv_header", "fixed_width"])
    end
    if name === Symbol("timeSeriesTableLayout")
        OpenAPI.validate_param(name, "DataExtractPost", :enum, val, ["time_by_column_layout", "time_by_row_layout", "time_by_file_layout"])
    end
    if name === Symbol("breakdownAndDataTypeLayout")
        OpenAPI.validate_param(name, "DataExtractPost", :enum, val, ["separate_files", "single_file"])
    end
end
