# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
Error(;
    type=nothing,
    status=nothing,
    detail=nothing,
)
```
This function send an error message 
# Arguments

-`type::Int64`- Gives the type of error
- `status::String`-
- `detail::String`- Gives the details of the error 

# Return
Returns errors giving details
# Example
 OrderedMap { "type": "", "status": "", "detail": "" }

# Reference
To know more about errors see the [Reference page of IPUMS API Errors](https://developer.ipums.org/docs/v2/reference/nhgis/)
"""
Base.@kwdef mutable struct Error <: OpenAPI.APIModel
    type::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    detail::Union{Nothing, String} = nothing

    function Error(type, status, detail, )
        OpenAPI.validate_property(Error, Symbol("type"), type)
        OpenAPI.validate_property(Error, Symbol("status"), status)
        OpenAPI.validate_property(Error, Symbol("detail"), detail)
        return new(type, status, detail, )
    end
end # type Error

const _property_types_Error = Dict{Symbol,String}(Symbol("type")=>"Int64", Symbol("status")=>"String", Symbol("detail")=>"String", )
OpenAPI.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Error[name]))}

function check_required(o::Error)
    o.type === nothing && (return false)
    o.status === nothing && (return false)
    o.detail === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Error }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Error", :format, val, "int32")
    end
end
