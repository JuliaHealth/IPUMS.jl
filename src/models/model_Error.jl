# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
Error(;
    type=nothing,
    status=nothing,
    detail=nothing,
)
```
This function returns the error message from a dataset request to the IPUMS API. 

# Arguments

- `type::Int64`- The error code for the message
- `status::String` - The actual error message returned
- `detail::String` - Additional explanation about the cause of the error

# Returns

This function return an `Error` object containing the reasons for the failure of a request to the IPUMS API.

# Examples

```julia-repl

julia> IPUMS.Error(type = 400,
                   status = "SemanticValidationError",
                   detail = "Geographic extents Extent selection is not required for selected geog levels. Please remove the 'geographic_extents' section of you request." )

# Output

{
  "type": 400,
  "status": "SemanticValidationError",
  "detail": "Geographic extents Extent selection is not required for selected geog levels. Please remove the 'geographic_extents' section of you request."
}

```

# References
To learn more about errors, please see:
* <https://developer.ipums.org/docs/v2/reference/nhgis/>
* <https://forum.ipums.org/t/proper-format-for-simple-api-call-in-r/4901>
"""
Base.@kwdef mutable struct Error <: OpenAPI.APIModel
    type::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    detail::Union{Nothing, String} = nothing

    function Error(type, status, detail, )
        OpenAPI.validate_property(Error, Symbol("type"), type)
        OpenAPI.validate_property(Error, Symbol("status"), status)
        OpenAPI.validate_property(Error, Symbol("detail"), detail)
        return new(type, status, detail, )
    end
end # type Error

const _property_types_Error = Dict{Symbol,String}(Symbol("type")=>"Int64", Symbol("status")=>"String", Symbol("detail")=>"String", )
OpenAPI.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Error[name]))}

function check_required(o::Error)
    o.type === nothing && (return false)
    o.status === nothing && (return false)
    o.detail === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Error }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Error", :format, val, "int32")
    end
end
