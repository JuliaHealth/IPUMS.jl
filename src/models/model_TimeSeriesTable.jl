# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
TimeSeriesTable(;
    geogLevels=nothing,
    years=nothing,
)
```
This function creates a table record with a given geographical level and year information.

# Arguments
- `geogLevels::Vector{String}` - A vector containing geographical levels, (eg."state", "county"), for the Time Series Table
- `years::Vector{String}` - **(Optional)** A list of years for this Time Series Table.

# Returns

This function returns a Time Series Table record giving the geographical level and the years to which the data are referring. 

# Examples
```julia-repl
julia> IPUMS.TimeSeriesTable(geogLevels=["state"],
                             years =["1790"])

# Outputs

{
  "geogLevels": [
    "state"
  ],
  "years": [
    "1790"
  ]
}
```
# References

To find additional information on the Time Series Table, please refer to: 
* <https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/time_series/)>
* <https://www.nhgis.org/time-series-tables>
"""
Base.@kwdef mutable struct TimeSeriesTable <: OpenAPI.APIModel
    geogLevels::Union{Nothing, Vector{String}} = nothing
    years::Union{Nothing, Vector{String}} = nothing

    function TimeSeriesTable(geogLevels, years, )
        OpenAPI.validate_property(TimeSeriesTable, Symbol("geogLevels"), geogLevels)
        OpenAPI.validate_property(TimeSeriesTable, Symbol("years"), years)
        return new(geogLevels, years, )
    end
end # type TimeSeriesTable

const _property_types_TimeSeriesTable = Dict{Symbol,String}(Symbol("geogLevels")=>"Vector{String}", Symbol("years")=>"Vector{String}", )
OpenAPI.property_type(::Type{ TimeSeriesTable }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TimeSeriesTable[name]))}

function check_required(o::TimeSeriesTable)
    o.geogLevels === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TimeSeriesTable }, name::Symbol, val)
end
