# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
TimeSeriesTable(;
    geogLevels=nothing,
    years=nothing,
)
```
This function creates a table with geographical and time information.

# Arguments
- `geogLevels::Vector{String}`- The geographical level of the Time Series Table
- `years::Vector{String}`-A list of years for this time series table.

# Return
The function returns a time series table giving the geographical level and the years to which the data are referring to. 

# Example
 OrderedMap { "geogLevels": "", "years": "1790"}
# Reference
To find out more about the Shapefile type visit the [Reference page of IPUMS API Time Series Table](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/time_series/)
"""
Base.@kwdef mutable struct TimeSeriesTable <: OpenAPI.APIModel
    geogLevels::Union{Nothing, Vector{String}} = nothing
    years::Union{Nothing, Vector{String}} = nothing

    function TimeSeriesTable(geogLevels, years, )
        OpenAPI.validate_property(TimeSeriesTable, Symbol("geogLevels"), geogLevels)
        OpenAPI.validate_property(TimeSeriesTable, Symbol("years"), years)
        return new(geogLevels, years, )
    end
end # type TimeSeriesTable

const _property_types_TimeSeriesTable = Dict{Symbol,String}(Symbol("geogLevels")=>"Vector{String}", Symbol("years")=>"Vector{String}", )
OpenAPI.property_type(::Type{ TimeSeriesTable }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TimeSeriesTable[name]))}

function check_required(o::TimeSeriesTable)
    o.geogLevels === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TimeSeriesTable }, name::Symbol, val)
end
