# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DataTableFull(;
    name=nothing,
    nhgisCode=nothing,
    description=nothing,
    universe=nothing,
    sequence=nothing,
    datasetName=nothing,
    nVariables=nothing,
)
```
Constructor to store information about a given table within a particular IPUMS dataset.

# Attributes

- `name::String` - **(Optional)** The unique identifier for the data table within its dataset.
- `nhgisCode::String` - **(Optional)** The code for this data table that will appear in extract.
- `description::String` - **(Optional)** A short description of the data table.
- `universe::String` - **(Optional)** The statistical population (set of entities) measured by this data table (e.g., persons, families, occupied housing units, etc.).
- `sequence::Int64` - **(Optional)** The order for which this data table will appear in the metadata API and extracts.
- `datasetName::String` - **(Optional)** The name of the dataset from which the data are from
- `nVariables::Int64` - **(Optional)** A list of variables within the table.

# Returns

This returns the name of the data, their nhgisCode, a description,their universe, a sequence, a dataset name and variables.

# Examples

```julia-repl

julia> IPUMS.DataTableFull(name = "NT1",
                           nhgisCode = "AAA",
                           description = "Total Population",
                           universe= "Persons",
                           sequence = 1,
                           datasetName = "1790_cPop",
                           nVariables = [IPUMS.DataTableFullVariablesInner(name = "NT001",
                                         nhgisCode = "AAA001")])

# Output

{
  "name": "NT1",
  "nhgisCode": "AAA",
  "description": "Total Population",
  "universe": "Persons",
  "sequence": 1,
  "datasetName": "1790_cPop",
  "nVariables": [
    {
      "name": "NT001",
      "nhgisCode": "AAA001"
    }
  ]
}
```
# Reference

To find out more about the DataTableFull visit the [IPUMS Developer Docs](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/datasets/)
"""
Base.@kwdef mutable struct DataTableFull <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    nhgisCode::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    universe::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Int64} = nothing
    datasetName::Union{Nothing, String} = nothing
    nVariables::Union{Nothing, Any} = nothing # spec type: Union{ Nothing, Vector{DataTableFullVariablesInner} }

    function DataTableFull(name, nhgisCode, description, universe, sequence, datasetName, nVariables, )
        OpenAPI.validate_property(DataTableFull, Symbol("name"), name)
        OpenAPI.validate_property(DataTableFull, Symbol("nhgisCode"), nhgisCode)
        OpenAPI.validate_property(DataTableFull, Symbol("description"), description)
        OpenAPI.validate_property(DataTableFull, Symbol("universe"), universe)
        OpenAPI.validate_property(DataTableFull, Symbol("sequence"), sequence)
        OpenAPI.validate_property(DataTableFull, Symbol("datasetName"), datasetName)
        OpenAPI.validate_property(DataTableFull, Symbol("nVariables"), nVariables)
        return new(name, nhgisCode, description, universe, sequence, datasetName, nVariables)
    end
end # type DataTableFull

const _property_types_DataTableFull = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("nhgisCode")=>"String", Symbol("description")=>"String", Symbol("universe")=>"String", Symbol("sequence")=>"Int64", Symbol("datasetName")=>"String", Symbol("nVariables")=>"Vector{DataTableFullVariablesInner}", )
OpenAPI.property_type(::Type{ DataTableFull }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataTableFull[name]))}

function check_required(o::DataTableFull)
    true
end

function OpenAPI.validate_property(a::Type{ DataTableFull }, name::Symbol, val)
    
end
