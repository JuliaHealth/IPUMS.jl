# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DataTableFullVariablesInner(;
    name=nothing,
    nhgisCode=nothing,
)
```
This function creates a record with the name of the data and their nhgiscode

# Attributes

-` name::String`-The unique identifier for the data table within its dataset.
- `nhgisCode::String`-The code for this data table that will appear in extract.

#Returns

This returns the name and nhgisCode of the data.

# Examples

```julia-repl
julia> IPUMS.DataTableFullVariablesInner(name = "NT1",nhgisCode = "AAA")
{
  "name": "NT1",
  "nhgisCode": "AAA"
}


```
# Reference
To find out more about DataTableFullVariablesInner visit :
* https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/datasets/
"""
Base.@kwdef mutable struct DataTableFullVariablesInner <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    nhgisCode::Union{Nothing, String} = nothing

    function DataTableFullVariablesInner(name, nhgisCode, )
        OpenAPI.validate_property(DataTableFullVariablesInner, Symbol("name"), name)
        OpenAPI.validate_property(DataTableFullVariablesInner, Symbol("nhgisCode"), nhgisCode)
        return new(name, nhgisCode, )
    end
end # type DataTableFullVariablesInner

const _property_types_DataTableFullVariablesInner = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("nhgisCode")=>"String", )
OpenAPI.property_type(::Type{ DataTableFullVariablesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataTableFullVariablesInner[name]))}

function check_required(o::DataTableFullVariablesInner)
    true
end

function OpenAPI.validate_property(::Type{ DataTableFullVariablesInner }, name::Symbol, val)
end
