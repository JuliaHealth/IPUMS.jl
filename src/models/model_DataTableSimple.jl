# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DataTableSimple

    DataTableSimple(;
        name=nothing,
        nhgisCode=nothing,
        description=nothing,
        sequence=nothing,
    )

    - name::String
    - nhgisCode::String
    - description::String
    - sequence::Int64
"""
Base.@kwdef mutable struct DataTableSimple <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    nhgisCode::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Int64} = nothing

    function DataTableSimple(name, nhgisCode, description, sequence, )
        OpenAPI.validate_property(DataTableSimple, Symbol("name"), name)
        OpenAPI.validate_property(DataTableSimple, Symbol("nhgisCode"), nhgisCode)
        OpenAPI.validate_property(DataTableSimple, Symbol("description"), description)
        OpenAPI.validate_property(DataTableSimple, Symbol("sequence"), sequence)
        return new(name, nhgisCode, description, sequence, )
    end
end # type DataTableSimple

const _property_types_DataTableSimple = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("nhgisCode")=>"String", Symbol("description")=>"String", Symbol("sequence")=>"Int64", )
OpenAPI.property_type(::Type{ DataTableSimple }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataTableSimple[name]))}

function check_required(o::DataTableSimple)
    true
end

function OpenAPI.validate_property(::Type{ DataTableSimple }, name::Symbol, val)
end
