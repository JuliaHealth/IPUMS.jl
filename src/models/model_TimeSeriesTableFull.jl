# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
TimeSeriesTableFull(;
    name=nothing,
    description=nothing,
    geographicIntegration=nothing,
    sequence=nothing,
    timeSeries=nothing,
    geogLevels=nothing,
)
```
This function creates a table with fixed name,description, geographical and timeline information.

# Argument
- `name::String`- The unique identifier of the time series table.
- `description::String`- A short description of the time series table.
- `geographicIntegration::String`- How the time series tables align geographic units across time.
- `sequence::Float32`- The order of appearence of the dataset in the metadata API and extract 
- `timeSeries::Vector{TimeSeriesTableFullTimeSeriesInner}`- A list of time series for this time series table.
- `geogLevels::Vector{TimeSeriesTableFullTimeSeriesInner}`-  A list of geographic levels available for this time series table.

# Return
The return is a new table with fixed name,description,time and geographical information of the data

# Example
example: OrderedMap { "name": "A00", "description": "Total Population", "geographicIntegration": "Nominal", 
"sequence": 0.01, "timeSeries": List [ OrderedMap { "name": "AA", "description": "Persons: Total", "sequence": 1 } ],
"geogLevels": List [ OrderedMap { "name": "state", "description": "State", "sequence": 4 }, OrderedMap { "name": "county", "description": "State--County", "sequence": 25 } ] }

# Reference
To find out more about the Time Series Table type visit the [Reference page of IPUMS API Time Series Table](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/time_series/)
"""
Base.@kwdef mutable struct TimeSeriesTableFull <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    geographicIntegration::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Float32} = nothing
    timeSeries::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TimeSeriesTableFullTimeSeriesInner} }
    geogLevels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TimeSeriesTableFullTimeSeriesInner} }

    function TimeSeriesTableFull(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("name"), name)
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("description"), description)
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("geographicIntegration"), geographicIntegration)
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("sequence"), sequence)
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("timeSeries"), timeSeries)
        OpenAPI.validate_property(TimeSeriesTableFull, Symbol("geogLevels"), geogLevels)
        return new(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
    end
end # type TimeSeriesTableFull

const _property_types_TimeSeriesTableFull = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("geographicIntegration")=>"String", Symbol("sequence")=>"Float32", Symbol("timeSeries")=>"Vector{TimeSeriesTableFullTimeSeriesInner}", Symbol("geogLevels")=>"Vector{TimeSeriesTableFullTimeSeriesInner}", )
OpenAPI.property_type(::Type{ TimeSeriesTableFull }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TimeSeriesTableFull[name]))}

function check_required(o::TimeSeriesTableFull)
    true
end

function OpenAPI.validate_property(::Type{ TimeSeriesTableFull }, name::Symbol, val)
end
