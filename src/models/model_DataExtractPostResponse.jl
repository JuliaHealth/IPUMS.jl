 # This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DataExtractPostResponse(;
    extractDefinition=nothing,
    number=nothing,
    status=nothing,
    downloadLinks=nothing,
)
```
This function extracts data giving a data definition,the status of the download and the link

# Arguments
- `extractDefinition::DataExtractDefinition`-  A short description of the extract data.
- `number::Int64`-
- `status::String`- The status of data extraction
- `downloadLinks::DataExtractDownloadLinks`- The link to download data

# Return 

Returns a new table with data definition,numbers,status and the download link

# Example
OrderedMap { "extractDefinition": OrderedMap { "datasets": OrderedMap { "1790_cPop": OrderedMap { "dataTables": List [ "NT1" ], "geogLevels": List [ "place_00498" ] }, "1800_cPop": OrderedMap { "dataTables": List [ "NT3" ], "geogLevels": List [ "state" ] } }, "timeSeriesTables": OrderedMap { "A00": OrderedMap { "geogLevels": List [ "state" ] } },
"timeSeriesTableLayout": "time_by_row_layout", "dataFormat": "csv_no_header", "description": "abc", "version": 2, "collection": "nhgis" }, "number": 2, "status": "complete",
"downloadLinks": OrderedMap { "codebookPreview": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv_PREVIEW.zip", "tableData": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv.zip", "gisData": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_shape.zip" } }
# Reference
https://developer.ipums.org/docs/v2/workflows/create_extracts/microdata)
"""
Base.@kwdef mutable struct DataExtractPostResponse <: OpenAPI.APIModel
    extractDefinition = nothing # spec type: Union{ Nothing, DataExtractDefinition }
    number::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    downloadLinks = nothing # spec type: Union{ Nothing, DataExtractDownloadLinks }

    function DataExtractPostResponse(extractDefinition, number, status, downloadLinks, )
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("extractDefinition"), extractDefinition)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("number"), number)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("status"), status)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("downloadLinks"), downloadLinks)
        return new(extractDefinition, number, status, downloadLinks, )
    end
end # type DataExtractPostResponse

const _property_types_DataExtractPostResponse = Dict{Symbol,String}(Symbol("extractDefinition")=>"DataExtractDefinition", Symbol("number")=>"Int64", Symbol("status")=>"String", Symbol("downloadLinks")=>"DataExtractDownloadLinks", )
OpenAPI.property_type(::Type{ DataExtractPostResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataExtractPostResponse[name]))}

function check_required(o::DataExtractPostResponse)
    true
end

function OpenAPI.validate_property(::Type{ DataExtractPostResponse }, name::Symbol, val)
    if name === Symbol("number")
        OpenAPI.validate_param(name, "DataExtractPostResponse", :format, val, "int64")
    end
end
