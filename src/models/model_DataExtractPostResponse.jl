 # This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DataExtractPostResponse(;
    extractDefinition=nothing,
    number=nothing,
    status=nothing,
    downloadLinks=nothing,
)
```
This function returns a response to a `DataExtractPost` request.

# Arguments

- `extractDefinition::DataExtractDefinition` - **(Optional)** A `DataExtractDefinition` from the original POST request
- `number::Int64` - **(Optional)** The extract ID number
- `status::String` - **(Optional)** The status of data extraction
- `downloadLinks::DataExtractDownloadLinks` - **(Optional)** The download links for the data

# Returns

This function returns a `DataExtractPostResponse` object containing the response from the IPUMS API to the DataExtractPost request.

# Examples

```julia-repl
julia> IPUMS.DataExtractPostResponse(extractDefinition = IPUMS.DataExtractDefinition(datasets = Dict("1790_cPop" => IPUMS.Dataset(dataTables = ["NT1"],
                                                                                                                                  geogLevels = ["place_00498"]),
                                                                                                     "1800_cPop" => IPUMS.Dataset(dataTables = ["NT3"],
                                                                                                                                  geogLevels = ["state"])),
                                                                                     timeSeriesTables = Dict("A00" => IPUMS.TimeSeriesTable(geogLevels = ["state"]),
                                                                                                             "A03" => IPUMS.TimeSeriesTable(geogLevels = ["state"]) ),
                                                                                     dataFormat = "csv_no_header",
                                                                                     timeSeriesTableLayout = "time_by_row_layout",
                                                                                     shapefiles = ["https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_shape.zip"] ,
                                                                                     geographicExtents = ["united states"],
                                                                                     description = "abc",
                                                                                     version = 2,
                                                                                     collection = "nhgis"),
                                                                                     number = 90,
                                                                                     status = "queued",
                                                                                     downloadLinks = IPUMS.DataExtractDownloadLinks(codebookPreview = "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv_PREVIEW.zip",
                                                                                                                                    tableData = "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv.zip",
                                                                                                                                    gisData = "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_shape.zip"))

# Output

{                                                                                                                                                  
  "extractDefinition": {                                                                                                                           
    "datasets": {                                                                                                                                  
      "1790_cPop": {                                                                                                                               
        "dataTables": [                                                                                                                            
          "NT1"                                                                                                                                    
        ],                                                                                                                                         
        "geogLevels": [                                                                                                                            
          "place_00498"                                                                                                                            
        ]                                                                                                                                          
      },                                                                                                                                           
      "1800_cPop": {                                                                                                                               
        "dataTables": [                                                                                                                            
          "NT3"                                                                                                                                    
        ],                                                                                                                                         
        "geogLevels": [                                                                                                                            
          "state"                                                                                                                                  
        ]                                                                                                                                          
      }                                                                                                                                            
    },                                                                                                                                             
    "timeSeriesTables": {
      "A00": {
        "geogLevels": [
          "state"
        ]
      },
      "A03": {
        "geogLevels": [
          "state"
        ]
      }
    },
    "dataFormat": "csv_no_header",
    "timeSeriesTableLayout": "time_by_row_layout",
    "shapefiles": [
      "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_shape.zip"
    ],
    "geographicExtents": [
      "united states"
    ],
    "description": "abc",
    "version": 2,
    "collection": "nhgis"
  },
  "number": 90,
  "status": "queued",
  "downloadLinks": {
    "codebookPreview": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv_PREVIEW.zip",
    "tableData": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_csv.zip",
    "gisData": "https://api.ipums.org/downloads/nhgis/api/v1/extracts/1234567/nhgis0007_shape.zip"
  }
}

```


# References

To learn more about `DataExtractPostResponse` visit the [IPUMS Developer Docs](https://developer.ipums.org/docs/v2/workflows/create_extracts/microdata)
"""
Base.@kwdef mutable struct DataExtractPostResponse <: OpenAPI.APIModel
    extractDefinition = nothing # spec type: Union{ Nothing, DataExtractDefinition }
    number::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    downloadLinks = nothing # spec type: Union{ Nothing, DataExtractDownloadLinks }

    function DataExtractPostResponse(extractDefinition, number, status, downloadLinks, )
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("extractDefinition"), extractDefinition)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("number"), number)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("status"), status)
        OpenAPI.validate_property(DataExtractPostResponse, Symbol("downloadLinks"), downloadLinks)
        return new(extractDefinition, number, status, downloadLinks, )
    end
end # type DataExtractPostResponse

const _property_types_DataExtractPostResponse = Dict{Symbol,String}(Symbol("extractDefinition")=>"DataExtractDefinition", Symbol("number")=>"Int64", Symbol("status")=>"String", Symbol("downloadLinks")=>"DataExtractDownloadLinks", )
OpenAPI.property_type(::Type{ DataExtractPostResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataExtractPostResponse[name]))}

function check_required(o::DataExtractPostResponse)
    true
end

function OpenAPI.validate_property(::Type{ DataExtractPostResponse }, name::Symbol, val)
    if name === Symbol("number")
        OpenAPI.validate_param(name, "DataExtractPostResponse", :format, val, "int64")
    end
end
