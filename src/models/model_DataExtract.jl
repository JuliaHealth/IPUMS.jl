# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""

```
DataExtract(;
    extractDefinition=nothing,
    number=nothing,
    status=nothing,
    downloadLinks=nothing,
)
```
This function extracts data given the definition of the data extracted, the link for the download and its status. 

# Arguments

- `extractDefinition::DataExtractDefinition`- Definition of the extracted data.
- `number::Int64`- Number of the data.
- `status::String`- Status of the data extraction (eg. "complete").
- `downloadLinks::DataExtractDownloadLinks`- Download link for the extracted data.

# Returns

It returns the data definition,the number the status of the download and the link to download the data.

# Examples

```julia-repl

julia> example = Dict(
         "extractDefinition" => Dict(
             "version" => 2,
             "variables" => Dict(
                 "YEAR" => Dict(),
                 "AGE" => Dict(
                     "attachedCharacteristics" => ["mother", "father", "spouse", "head"]
                 )
             ),
             "samples" => Dict(
                 "us2013a" => Dict()
             ),
             "dataFormat" => "csv",
             "description" => "my extract",
             "dataStructure" => Dict(
                 "rectangular" => Dict(
                     "on" => "P"
                 )
             ),
             "collection" => "usa"
         ),
         "number" => 2,
         "status" => "complete",
         "downloadLinks" => Dict(
             "data" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.dat",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "ddiCodebook" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.cbk",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "basicCodebook" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.xml",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "spssCommandFile" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.sps",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "sasCommandFile" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.sas",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "stataCommandFile" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.do",
                 "bytes" => 42,
                 "sha256" => "abc123"
             ),
             "rCommandFile" => Dict(
                 "url" => "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.R",
                 "bytes" => 42,
                 "sha256" => "abc123"
             )
         )
     )

julia> IPUMS.DataExtract(example["extractDefinition"], example["number"], example["status"], example["downloadLinks"])

{
  "extractDefinition": {
    "dataFormat": "csv",
    "variables": {
      "YEAR": {},
      "AGE": {
        "attachedCharacteristics": [
          "mother",
          "father",
          "spouse",
          "head"
        ]
      }
    },
    "dataStructure": {
      "rectangular": {
        "on": "P"
      }
    },
    "samples": {
      "us2013a": {}
    },
    "version": 2,
    "description": "my extract",
    "collection": "usa"
  },
  "number": 2,
  "status": "complete",
  "downloadLinks": {
    "ddiCodebook": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.cbk"
    },
    "basicCodebook": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.xml"
    },
    "data": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.dat"
    },
    "sasCommandFile": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.sas"
    },
    "stataCommandFile": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.do"
    },
    "spssCommandFile": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.sps"
    },
    "rCommandFile": {
      "sha256": "abc123",
      "bytes": 42,
      "url": "https://api.ipums.org/downloads/usa/api/v1/extracts/1234567/usa_0002.R"
    }
  }
}
```
# Reference
To find out more about the DataExtract type visit the [Reference page of IPUMS API DataExtract](https://developer.ipums.org/docs/v2/workflows/create_extracts/microdata)

The example code was converted from javascript to Julia using ChatGPT(https://chatgpt.com/).
"""
Base.@kwdef mutable struct DataExtract <: OpenAPI.APIModel
    extractDefinition = nothing # spec type: Union{ Nothing, DataExtractDefinition }
    number::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    downloadLinks = nothing # spec type: Union{ Nothing, DataExtractDownloadLinks }

    function DataExtract(extractDefinition, number, status, downloadLinks, )
        OpenAPI.validate_property(DataExtract, Symbol("extractDefinition"), extractDefinition)
        OpenAPI.validate_property(DataExtract, Symbol("number"), number)
        OpenAPI.validate_property(DataExtract, Symbol("status"), status)
        OpenAPI.validate_property(DataExtract, Symbol("downloadLinks"), downloadLinks)
        return new(extractDefinition, number, status, downloadLinks, )
    end
end # type DataExtract

const _property_types_DataExtract = Dict{Symbol,String}(Symbol("extractDefinition")=>"DataExtractDefinition", Symbol("number")=>"Int64", Symbol("status")=>"String", Symbol("downloadLinks")=>"DataExtractDownloadLinks", )
OpenAPI.property_type(::Type{ DataExtract }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataExtract[name]))}

function check_required(o::DataExtract)
    true
end

function OpenAPI.validate_property(::Type{ DataExtract }, name::Symbol, val)
    if name === Symbol("number")
        OpenAPI.validate_param(name, "DataExtract", :format, val, "int64")
    end
end
