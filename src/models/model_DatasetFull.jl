# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DatasetFull(;
    name=nothing,
    description=nothing,
    group=nothing,
    sequence=nothing,
    dataTables=nothing,
    geogLevels=nothing,
    hasMultipleDataTypes=nothing,
    breakdowns=nothing,
)
```
This function creates a dataset given a dataset description. This function
is used to download data from the IPUMS website.

# Arguments

- `name::String`- **(Optional)** The dataset identifier 
- `description::String`- **(Optional)** a short description of the dataset
- `group::String`- **(Optional)** the group of dataset to which it belongs
- `sequence::Int64`- **(Optional)** the order of appearence of the dataset in the metadata API and extract
- `dataTables::Vector{DataTableSimple}`- **(Optional)** The list of the available datatable for the dataset
- `geogLevels::Vector{DatasetFullGeogLevelsInner}`- **(Optional)** A list of the geographic levels available for the dataset
- `hasMultipleDataTypes::Bool`- **(Optional)** A boolean indicating if multiple data types exist for the dataset
- `breakdowns::DatasetFullBreakdowns`- **(Optional)** List of breakdown available for the dataset

# Returns

The function returns a new `DatasetFull` object.
    
# Examples

```julia-repl
julia> IPUMS.DatasetFull(name = "2010_SF1a",
                         description = "SF 1a - P & H Tables [Blocks & Larger Areas]",
                         group = "2010 Census",
                         sequence = 4802,
                         dataTables = [IPUMS.DataTableSimple(name = "P1",
                                                             nhgisCode = "H7V",
                                                             description = "Total Population",
                                                             sequence = 1)],
                         geogLevels = [ IPUMS.DatasetFullGeogLevelsInner(name = "nation",
                                        description = "Nation",
                                        hasGeogExtentSelection = false)],
                         hasMultipleDataTypes = false,
                         breakdowns = IPUMS.DatasetFullBreakdowns(name = "bs32",
                                                                  type = "Spatial",
                                                                  description = "Geographic Subarea (2010 Census and American Community Survey)",
                                                                  breakdownValues = [IPUMS.DatasetFullBreakdownsBreakdownValuesInner(name = "bs32.ge00",
                                                                                                           description = "Total area")]))

# Output

{                                                                                                                                                  
  "name": "2010_SF1a",                                                                                                                             
  "description": "SF 1a - P & H Tables [Blocks & Larger Areas]",                                                                                   
  "group": "2010 Census",                                                                                                                          
  "sequence": 4802,                                                                                                                                
  "dataTables": [                                                                                                                                  
    {
      "name": "P1",
      "nhgisCode": "H7V",
      "description": "Total Population",
      "sequence": 1
    }
  ],
  "geogLevels": [
    {
      "name": "nation",
      "description": "Nation",
      "hasGeogExtentSelection": false
    }
  ],
  "hasMultipleDataTypes": false,
  "breakdowns": {
    "name": "bs32",
    "type": "Spatial",
    "description": "Geographic Subarea (2010 Census and American Community Survey)",
    "breakdownValues": [
      {
        "name": "bs32.ge00",
        "description": "Total area"
      }
    ]
  }
}
```

# References

To learn more about the `DatasetFull` type visit the [IPUMS Developer Docs](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/datasets/)
"""
Base.@kwdef mutable struct DatasetFull <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    group::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Int64} = nothing
    dataTables::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DataTableSimple} }
    geogLevels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DatasetFullGeogLevelsInner} }
    hasMultipleDataTypes::Union{Nothing, Bool} = nothing
    breakdowns = nothing # spec type: Union{ Nothing, DatasetFullBreakdowns }

    function DatasetFull(name, description, group, sequence, dataTables, geogLevels, hasMultipleDataTypes, breakdowns, )
        OpenAPI.validate_property(DatasetFull, Symbol("name"), name)
        OpenAPI.validate_property(DatasetFull, Symbol("description"), description)
        OpenAPI.validate_property(DatasetFull, Symbol("group"), group)
        OpenAPI.validate_property(DatasetFull, Symbol("sequence"), sequence)
        OpenAPI.validate_property(DatasetFull, Symbol("dataTables"), dataTables)
        OpenAPI.validate_property(DatasetFull, Symbol("geogLevels"), geogLevels)
        OpenAPI.validate_property(DatasetFull, Symbol("hasMultipleDataTypes"), hasMultipleDataTypes)
        OpenAPI.validate_property(DatasetFull, Symbol("breakdowns"), breakdowns)
        return new(name, description, group, sequence, dataTables, geogLevels, hasMultipleDataTypes, breakdowns, )
    end
end # type DatasetFull

const _property_types_DatasetFull = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("group")=>"String", Symbol("sequence")=>"Int64", Symbol("dataTables")=>"Vector{DataTableSimple}", Symbol("geogLevels")=>"Vector{DatasetFullGeogLevelsInner}", Symbol("hasMultipleDataTypes")=>"Bool", Symbol("breakdowns")=>"DatasetFullBreakdowns", )
OpenAPI.property_type(::Type{ DatasetFull }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DatasetFull[name]))}

function check_required(o::DatasetFull)
    true
end

function OpenAPI.validate_property(::Type{ DatasetFull }, name::Symbol, val)
end
