# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
DatasetFullBreakdowns(;
    name=nothing,
    type=nothing,
    description=nothing,
    breakdownValues=nothing,
    years=nothing,
    geographicInstances=nothing,
)
```
This function ceates a dataset giving the description and the type of data, the sequence, the geographical ans year information and breakdowns.

# Arguments
- `name::String`-The dataset identifier 
- `type::String`- The type of dat in the dataset
- `description::String`- a short description of the dataset
- `breakdownValues::Vector{DatasetFullBreakdownsBreakdownValuesInner}`- List of breakdown available for the dataset
- `years::Vector{String}`-List of the years if data of multiple years are present
- `geographicInstances::Vector{DatasetFullBreakdownsBreakdownValuesInner}`- List of geographical extent

# Return
The function returns a new dataset
    
# Example
OrderedMap { "name": "2010_SF1a", "type": "", "description": "SF 1a - P & H Tables [Blocks & Larger Areas]","breakdownValues": List [ OrderedMap { "name": "bs32.ge00", "description": "Total area" } ],  
  "years": "","geographicInstances": List [ OrderedMap { "name": "010", "description": "Alabama" } ]}
# Reference
To find out more about the Dataset type visit the [Reference page of IPUMS API Dataset](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/datasets/)
"""
Base.@kwdef mutable struct DatasetFullBreakdowns <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    breakdownValues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DatasetFullBreakdownsBreakdownValuesInner} }
    years::Union{Nothing, Vector{String}} = nothing
    geographicInstances::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DatasetFullBreakdownsBreakdownValuesInner} }

    function DatasetFullBreakdowns(name, type, description, breakdownValues, years, geographicInstances, )
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("name"), name)
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("type"), type)
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("description"), description)
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("breakdownValues"), breakdownValues)
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("years"), years)
        OpenAPI.validate_property(DatasetFullBreakdowns, Symbol("geographicInstances"), geographicInstances)
        return new(name, type, description, breakdownValues, years, geographicInstances, )
    end
end # type DatasetFullBreakdowns

const _property_types_DatasetFullBreakdowns = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String", Symbol("description")=>"String", Symbol("breakdownValues")=>"Vector{DatasetFullBreakdownsBreakdownValuesInner}", Symbol("years")=>"Vector{String}", Symbol("geographicInstances")=>"Vector{DatasetFullBreakdownsBreakdownValuesInner}", )
OpenAPI.property_type(::Type{ DatasetFullBreakdowns }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DatasetFullBreakdowns[name]))}

function check_required(o::DatasetFullBreakdowns)
    true
end

function OpenAPI.validate_property(::Type{ DatasetFullBreakdowns }, name::Symbol, val)
end
