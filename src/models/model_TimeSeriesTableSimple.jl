# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
TimeSeriesTableSimple(;
    name=nothing,
    description=nothing,
    geographicIntegration=nothing,
    sequence=nothing,
    timeSeries=nothing,
    geogLevels=nothing,
)
```
This fuction creates a new record given the name and the description of the data.

# Arguments

- `name::String`-  The unique variable identifier for the time series table, (eg. "A00", "OWNERSHP").
- `description::String`- A short description of the time series variable referred to in `name`.
- `geographicIntegration::String`-   How does the variable value account for changes in geographic boundaries over time, (eg. "Nominal").
- `sequence::Float32`- The order of appearence of the dataset in the metadata API and extract.
- `timeSeries::Vector{String}`-  A list of time series records corresponding to the variable specified in `name`.
- `geogLevels::Vector{String}`- A list of geographic levels available for this time series table.

# Returns

This function returns a new record.


# Examples

```julia-repl
julia> IPUMS.TimeSeriesTableSimple(name = "A00", description = "Total Population", geographicIntegration = "Nominal",sequence = 0.01, timeSeries = ["1790"],geogLevels = ["state"] )
{
  "name": "A00",
  "description": "Total Population",
  "geographicIntegration": "Nominal",
  "sequence": 0.01,
  "timeSeries": [
    "1790"
  ],
  "geogLevels": [
    "state"
  ]
}
```

# References 

To find out more about the `TimeSeriesTableSimple` type visit the link:
* https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/time_series/
"""



Base.@kwdef mutable struct TimeSeriesTableSimple <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    geographicIntegration::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Float32} = nothing
    timeSeries::Union{Nothing, Vector{String}} = nothing
    geogLevels::Union{Nothing, Vector{String}} = nothing

    function TimeSeriesTableSimple(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("name"), name)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("description"), description)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("geographicIntegration"), geographicIntegration)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("sequence"), sequence)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("timeSeries"), timeSeries)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("geogLevels"), geogLevels)
        return new(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
    end
end # type TimeSeriesTableSimple

const _property_types_TimeSeriesTableSimple = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("geographicIntegration")=>"String", Symbol("sequence")=>"Float32", Symbol("timeSeries")=>"Vector{String}", Symbol("geogLevels")=>"Vector{String}", )
OpenAPI.property_type(::Type{ TimeSeriesTableSimple }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TimeSeriesTableSimple[name]))}

function check_required(o::TimeSeriesTableSimple)
    true
end

function OpenAPI.validate_property(::Type{ TimeSeriesTableSimple }, name::Symbol, val)
end
