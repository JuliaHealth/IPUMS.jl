# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


"""
```
TimeSeriesTableSimple(;
    name=nothing,
    description=nothing,
    geographicIntegration=nothing,
    sequence=nothing,
    timeSeries=nothing,
    geogLevels=nothing,
)
```
This fuction generstes s 

# Arguments:

- `name::String`- The unique identifier of the time series table.
- `description::String`- A short description of the time series table.
- `geographicIntegration::String`-  How the time series tables align geographic units across time
- `sequence::Float32`- The order in which the time series table will appear in the metadata API and extracts.
- `timeSeries::Vector{String}`-  A list of time series for this time series table.
- `geogLevels::Vector{String}`- A list of geographic levels available for this time series table.

# Return
This function takes as input the name,description, geographic integration, the time series and the geographical level of the data, 
    and returns a table

# Example
OrderedMap { "name": "A00", "description": "Total Population", "geographicIntegration": "Nominal", "sequence": 0.01,
"years": List [ "1790", "1800", "1810", "1820", "1830", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940", "1950", "1960", "1970", "1980", "1990", "2000", "2010" ],
"geogLevels": List [ "state", "county" ] }



# Reference 
To find out more about the Shapefile type visit the [Reference page of IPUMS API Time Series Table](https://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/time_series/)
"""



Base.@kwdef mutable struct TimeSeriesTableSimple <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    geographicIntegration::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Float32} = nothing
    timeSeries::Union{Nothing, Vector{String}} = nothing
    geogLevels::Union{Nothing, Vector{String}} = nothing

    function TimeSeriesTableSimple(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("name"), name)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("description"), description)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("geographicIntegration"), geographicIntegration)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("sequence"), sequence)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("timeSeries"), timeSeries)
        OpenAPI.validate_property(TimeSeriesTableSimple, Symbol("geogLevels"), geogLevels)
        return new(name, description, geographicIntegration, sequence, timeSeries, geogLevels, )
    end
end # type TimeSeriesTableSimple

const _property_types_TimeSeriesTableSimple = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("geographicIntegration")=>"String", Symbol("sequence")=>"Float32", Symbol("timeSeries")=>"Vector{String}", Symbol("geogLevels")=>"Vector{String}", )
OpenAPI.property_type(::Type{ TimeSeriesTableSimple }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TimeSeriesTableSimple[name]))}

function check_required(o::TimeSeriesTableSimple)
    true
end

function OpenAPI.validate_property(::Type{ TimeSeriesTableSimple }, name::Symbol, val)
end
