var documenterSearchIndex = {"docs":
[{"location":"howto/#How-to?","page":"How to ","title":"How to?","text":"","category":"section"},{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/#Tutorial-1","page":"Tutorials","title":"Tutorial 1","text":"","category":"section"},{"location":"tutorials/#Tutorial-2","page":"Tutorials","title":"Tutorial 2","text":"","category":"section"},{"location":"tutorials/#Tutorial-3","page":"Tutorials","title":"Tutorial 3","text":"","category":"section"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Example-1","page":"Examples","title":"Example 1","text":"","category":"section"},{"location":"examples/#Example-2","page":"Examples","title":"Example 2","text":"","category":"section"},{"location":"examples/#Example-3","page":"Examples","title":"Example 3","text":"","category":"section"},{"location":"workflow/#Workflow","page":"Workflows","title":"Workflow","text":"","category":"section"},{"location":"#IPUMS","page":"Home","title":"IPUMS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for IPUMS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IPUMS]","category":"page"},{"location":"#IPUMS.DDIInfo","page":"Home","title":"IPUMS.DDIInfo","text":"DDIInfo(\n    filepath::String, \n    conditions::String = \"\", \n    citation::String = \"\", \n    ipums_project::String = \"\",\n    extract_notes::Sring = \"\", \n    extract_date::String = \"\",\n    variable_info::Vector{DDIVariable} = DDIVariable[]\n    _xml_doc::EzXML.Document = EzXML.XMLDocument()\n    _ns::String = \"\"\n    data_summary::DataFrame = DataFrame()\n)\n\nA struct representing the metadata taken from an IPUMS extract. An IPUMS  extract contains both file-level metadata (such as the date of export), as well as variable level metadata (such as the name and data type of a variable). \n\nThe DDIInfo object is not generally called directly. The parse_ddi()  function creates a DDIinfo object after successfully parsing a DDI  file from an IPUMS extract. \n\nThe DDIInfo object contains file level metadata. The variable_info field of the DDIInfo  object contains a vector of DDIVariable objects. DDIVariable objects contain metadata information about individual IPUMS variables.   \n\nKeyword Arguments\n\nfilepath::String -  File system path to the DDI (.xml) file.\nconditions::String - IPUMS legal specification on the proper use of IPUMS                            data.\ncitation::String - Information for the citation of IPUMS data.\nipums_project::String - Identifier for the IPUMS source of the extract                            data, such as IPUMS CPS, or IPUMS USA, etc. \nextract_notes::String - Additional clarifying information or user nodes                            about the extract. \nextract_date::String - Date on which the extract was produced.\nvariable_info::Vector{DDIVariable} - a vector of DDIVariable objects,                                       which contain metadata on each variable                                       or column in the data file.\n_xml_doc::EzXML.Document - An internal attribute that contains an internal                                representation of the DDI DOM for parsing.\n_ns::String - An internal attribute to hold any namespaces used in the                    XML DOM.\ndata_summary::DataFrame - Contains a dataframe that holds summary information                   about the variables in the dataset, including variable names,                   data types, variable descriptions, and categorical information.\n\nReturns\n\nDDIInfo object that contains both file-level and variable-level metadata extracted from an IPUMS DDI (.xml) file. \n\nExample\n\njulia> IPUMS.DDIInfo(filepath = \"test_ddi.xml\")\n\nIPUMS.DDIInfo(\"test_ddi.xml\", \"\", \"\", \"\", \"\", \"\", IPUMS.DDIVariable[], EzXML.Document(EzXML.Node(<DOCUMENT_NODE@0x00000000034466d0>)), \"\", 0Ã—0 DataFrame)\n\nReferences\n\nInformation about each variable field is taken from: \n\nhttps://ddialliance.org/Specification/DDI-Codebook/2.5/XMLSchema/fieldleveldocumentationfiles/schemas/codebookxsd/elements/var.html\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DDIVariable","page":"Home","title":"IPUMS.DDIVariable","text":"DDIVariable(\n    name::String = \"\", \n    position_start::Int64 = 9999,\n    position_end::Int64 = 9999,\n    position_width::Int64 = 9999,\n    labl::String = \"\", \n    desc::String = \"\", \n    dcml::Int64 = 9999, \n    var_dtype::DataType = String,\n    var_interval::String = \"\",\n    category_labels::Union{Vector{Pair{Int64, String}}, Nothing} = nothing\n    coder_instructions::Union{String, Nothing} = nothing\n)\n\nA struct representing individual variable/column metadata from an IPUMS extract file. This stuct is used for parsing the IPUMS datafile, which may be of fixed  width format, hence the position_ fields. The default value for missing  strings is an empty string \"\", while the default value for missing integer values  is 9999.\n\nKeyword Arguments\n\nname::String - Name of the variable, as per the column name of the IPUMS                    extract file. This name is limited to 8 characters.\nposition_start::Int64 - The starting position (in columns) of a variable                            in a fixed width file format.\nposition_end::Int64 - The ending position (in columns) of a variable                            in a fixed width file format.\nposition_width::Int64 - The length (in columns) of a variable in a fixed                            width file format. \nlabl::String - A short description of the variable. Often the labl is                    used to display a description of the variable in a                    dataframe or display.\ndesc::String - A longer description of the variable, including information                    about the use of the variable. \ndcml::Int64 - Identifies the number of decimal points in the variable.\nvar_dtype::DataType - Indentifies the Julia data type of the variable.\nvar_interval::String - Identifies if a numeric variable is discrete or                    continuous. \ncategory_labels::Union{Vector{Pair{Int64, String}}, Nothing} - If a variable is                    categorical, then this is a vector of (key, value) pairs, where                    the key is a numerical index and the value is the category                    label, for example (1 => \"category 1\"). If a variable is not                    categorical, then this attribute has a value of nothing.\ncoder_instructions::Union{String, Nothing} - Contains any additional                    information about how the variable was coded and how it                    should be treated.\n\nReturns\n\nDDIVariable object specifying the metadata for each variable.\n\nExample\n\njulia> IPUMS.DDIVariable(\n    name = \"YEAR\",\n    position_start = 1,\n    position_end = 4,\n    position_width = 4, \n    labl = \"Survey year\",\n    desc = \"YEAR reports the year in which the survey was conducted.  YEARP is repeated on person records.\",\n    dcml = 0,\n    var_dtype = String,\n    var_interval = \"continuous\",\n    category_labels = nothing,\n    coder_instructions = nothing\n    )\n\nIPUMS.DDIVariable(\"YEAR\", 1, 4, 4, \"Survey year\", \"YEAR reports the year in which the survey was conducted.  YEARP is repeated on person records.\", 0, Int64, \"continuous\", nothing, nothing)\n\nReferences\n\nInformation about each variable field is taken from: \n\nhttps://ddialliance.org/Specification/DDI-Codebook/2.5/XMLSchema/fieldleveldocumentationfiles/schemas/codebookxsd/elements/stdyDscr.html\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataExtract","page":"Home","title":"IPUMS.DataExtract","text":"DataExtract(;\n    extractDefinition=nothing,\n    number=nothing,\n    status=nothing,\n    downloadLinks=nothing,\n)\n\nThis function prepares a data extract request for submission to the IPUMS API.\n\nArguments\n\nextractDefinition::DataExtractDefinition- Definition of the extracted data.\nnumber::Int64- Number of the data.\nstatus::String- Status of the data extraction (eg. \"complete\").\ndownloadLinks::DataExtractDownloadLinks- Download link for the extracted data.\n\nReturns\n\nIt returns the data definition,the number the status of the download and the link to download the data.\n\nExamples\n\n\njulia> example = Dict(\n         \"extractDefinition\" => DataExtractDefinition(\n              #=\n                ...\n                extractDefinition details here\n                ...\n                =#\n         ),\n         \"number\" => 2,\n         \"status\" => \"complete\",\n         \"downloadLinks\" => DataExtractDownloadLinks(\n             #=\n                ...\n                Download link details here\n                ...\n                =#\n             )\n         )\n     )\n\njulia> IPUMS.DataExtract(example[\"extractDefinition\"], example[\"number\"], example[\"status\"], example[\"downloadLinks\"])\n\n{\n  \"extractDefinition\": {\n   #=\n    ...\n    Extract definition details here\n    ...\n    =#\n  },\n  \"number\": 2,\n  \"status\": \"complete\",\n  \"downloadLinks\": {\n     #=\n    ...\n    Download link details here\n    ...\n    =#\n   \n  }\n}\n\nReference\n\nTo find out more about the DataExtract type visit the Reference page of IPUMS API DataExtract\n\nThe example code was converted from javascript to Julia using ChatGPT(https://chatgpt.com/).\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataExtractDefinition","page":"Home","title":"IPUMS.DataExtractDefinition","text":"DataExtractDefinition( version= \"2\",;\n    datasets=nothing,\n    timeSeriesTables=nothing,\n    dataFormat=nothing,\n    timeSeriesTableLayout=nothing,\n    breakdownAndDataTypeLayout=nothing,\n    shapefiles=nothing,\n    geographicExtents=nothing,\n    description=nothing,\n    collection=nothing,\n)\n\nThis function creates a definition object that is used for extracting data from an IPUMS dataset.\n\nKeyword Arguments\n\n-version::String - What version of the IPUMS API to use (Default: \"2\")\n\nArguments\n\n-datasets::Dict{String, Dataset}- A dictionary indicating the dataset to select -timeSeriesTables::Dict{String, TimeSeriesTable}- An object where each key is the name of the requested time series table and each value is another object describing your selections for that time series table. -dataFormat::String- The requested format of your data.Some examples are:     - \"csv_no_header\" (default) includes only a minimal header in the first row\n\n- `\"csv_header\"` includes a second, more descriptive header row.\n\n- `\"fixed_width\"` provides data in a fixed width format.\n\n-timeSeriesTableLayout::String- The layout of your time series table data. Some examples are:     - \"time_by_column_layout\" (wide format, default): rows correspond to geographic units, columns correspond to different times in the time series.\n\n- `\"time_by_row_layout\"` (long format): rows correspond to a single geographic unit at a single point in time.\n\n- `\"time_by_file_layout\"`: data for different times are provided in separate files.\n\n-breakdownAndDataTypeLayout::String-The layout of your dataset data when multiple data types or breakdown combos are present. -shapefiles::Vector{String}- A list of selected shapefiles. -geographicExtents::Vector{String}-A list of geographic_instances to use as extents for all datasets on this request. -description::String- A short description of your extract. -collection::String- What IPUMS collection to be queried for the extract (options could include \"nhgis\", \"usa\", etc. corresponding to IPUMS NHGIS or NHGIS USA databases).\n\nReturns\n\nThe function return a new definition object to extract data from IPUMS dataset.\n\nExamples\n\nReferences\n\nTo know more about DataExtractDefinition see:\n\nhttps://developer.ipums.org/docs/v2/workflows/create_extracts/microdata\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataExtractDownloadLinks","page":"Home","title":"IPUMS.DataExtractDownloadLinks","text":"DataExtractDownloadLinks(;\n    codebookPreview=nothing,\n    tableData=nothing,\n    gisData=nothing,\n)\n\nThis function provides the download links for an extract's codebook, tabular data, and GIS data.\n\nArguments\n\ncodebookPreview::String-\ntableData::String- \ngisData::String-\n\nReturns\n\nThe function returns the download links for an extract's codebook, tabular data, and GIS data.\n\nExamples\n\nOrderedMap { \"codebookPreview\": \"\", \"tableData\": \"\", \"gisData\": \"state\"}\n\nReferences\n\nhttps://developer.ipums.org/docs/v2/workflows/create_extracts/microdata\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataExtractPost","page":"Home","title":"IPUMS.DataExtractPost","text":"DataExtractPost(;\n    datasets=nothing,\n    timeSeriesTables=nothing,\n    dataFormat=nothing,\n    timeSeriesTableLayout=nothing,\n    breakdownAndDataTypeLayout=nothing,\n    shapefiles=nothing,\n    geographicExtents=nothing,\n    description=nothing,\n)\n\nThis function prepares a POST object for delivery to an IPUMS POST endpoint.\n\nArguments\n\ndatasets::Dict{String, Dataset}- An object where each key is the name of the requested dataset and each value is another object describing your selections for that datase\ntimeSeriesTables::Dict{String, TimeSeriesTable}-An object where each key is the name of the requested time series table and each value is another object describing your selections for that time series table.\ndataFormat::String- The requested format of your data\n\n-timeSeriesTableLayout::String-  The layout of your time series table data.\n\nbreakdownAndDataTypeLayout::String- The layout of your dataset data when multiple data types or breakdown combos are present\nshapefiles::Vector{String}- A list of selected shapefiles.\ngeographicExtents::Vector{String}- A list of geographic_instances to use as extents for all datasets on this request\ndescription::String- A short description of your extract.\n\nReturns\n\nThe fuction returns a POST object for delivery to an IPUMS POST endpoint.\n\nExamples\n\nReference\n\nhttps://developer.ipums.org/docs/v2/workflows/create_extracts/microdata)\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataExtractPostResponse","page":"Home","title":"IPUMS.DataExtractPostResponse","text":"DataExtractPostResponse(;\n    extractDefinition=nothing,\n    number=nothing,\n    status=nothing,\n    downloadLinks=nothing,\n)\n\nThis function extracts data giving a data definition,the status of the download and the link\n\nArguments\n\nextractDefinition::DataExtractDefinition-  An object coming from a DataExtractDefinition file.\nnumber::Int64- The extract ID number.\nstatus::String- The status of data extraction.\ndownloadLinks::DataExtractDownloadLinks- The link to download data.\n\nReturns\n\nReturns a POST response from the IPUMS API.\n\nExamples\n\nReferences\n\nTo know more about DataExtractPostResponse visit the link:\n\nhttps://developer.ipums.org/docs/v2/workflows/create_extracts/microdata\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataTableFull","page":"Home","title":"IPUMS.DataTableFull","text":"DataTableFull(;\n    name=nothing,\n    nhgisCode=nothing,\n    description=nothing,\n    universe=nothing,\n    sequence=nothing,\n    datasetName=nothing,\n    nVariables=nothing,\n)\n\nConstructor to store information about a given table within a particular IPUMS dataset.\n\nAttributes\n\nname::String - (Optional) The unique identifier for the data table within its dataset.\nnhgisCode::String - (Optional) The code for this data table that will appear in extract.\ndescription::String - (Optional) A short description of the data table.\nuniverse::String - (Optional) The statistical population (set of entities) measured by this data table (e.g., persons, families, occupied housing units, etc.).\nsequence::Int64 - (Optional) The order for which this data table will appear in the metadata API and extracts.\ndatasetName::String - (Optional) The name of the dataset from which the data are from\nnVariables::Int64 - (Optional) A list of variables within the table.\n\nReturns\n\nThis returns the name of the data, their nhgisCode, a description,their universe, a sequence, a dataset name and variables.\n\nExamples\n\n\njulia> IPUMS.DataTableFull(name = \"NT1\",\n                           nhgisCode = \"AAA\",\n                           description = \"Total Population\",\n                           universe= \"Persons\",\n                           sequence = 1,\n                           datasetName = \"1790_cPop\",\n                           nVariables = [IPUMS.DataTableFullVariablesInner(name = \"NT001\",\n                                         nhgisCode = \"AAA001\")])\n\n# Output\n\n{\n  \"name\": \"NT1\",\n  \"nhgisCode\": \"AAA\",\n  \"description\": \"Total Population\",\n  \"universe\": \"Persons\",\n  \"sequence\": 1,\n  \"datasetName\": \"1790_cPop\",\n  \"nVariables\": [\n    {\n      \"name\": \"NT001\",\n      \"nhgisCode\": \"AAA001\"\n    }\n  ]\n}\n\nReference\n\nTo find out more about the DataTableFull visit the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataTableFullVariablesInner","page":"Home","title":"IPUMS.DataTableFullVariablesInner","text":"DataTableFullVariablesInner(;\n    name=nothing,\n    nhgisCode=nothing,\n)\n\nInner constructor representing the variables within a DataTableFull object.\n\nAttributes\n\n-name::String - (Optional) The unique identifier for the data table within its dataset. -nhgisCode::String - (Optional) The code for this data table that will appear in extract.\n\nReturns\n\nThis returns an inner constructor for a DataTable variable, the DataTableFullVariablesInner object.\n\nExamples\n\n\njulia> IPUMS.DataTableFullVariablesInner(name = \"NT1\",\n                                         nhgisCode = \"AAA\")\n\n# Output\n\n{\n  \"name\": \"NT1\",\n  \"nhgisCode\": \"AAA\"\n}\n\n\nReference\n\nTo find out more about DataTableFullVariablesInner visit the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DataTableSimple","page":"Home","title":"IPUMS.DataTableSimple","text":"DataTableSimple(;\n    name=nothing,\n    nhgisCode=nothing,\n    description=nothing,\n    sequence=nothing,\n)\n\nBuilds an object that contains the representation of an IPUMS table.\n\nArguments\n\nname::String- (Optional) The unique identifier for the data table within its dataset.\nnhgisCode::String- (Optional) The code for this data table that will appear in extract.\ndescription::String- (Optional) A short description of the data table.\nsequence::Int64- (Optional) The order for which this data table will appear in the metadata API and extracts.\n\nExamples\n\njulia> IPUMS.DataTableSimple(name = \"NT1\",\n                             nhgisCode = \"AAA\",\n                             description = \"Total Population\",\n                             sequence = 1)\n\n# Output\n\n{\n  \"name\": \"NT1\",\n  \"nhgisCode\": \"AAA\",\n  \"description\": \"Total Population\",\n  \"sequence\": 1\n}\n\nReferences\n\nFor more information about the DataTableSimple object, consult the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.Dataset","page":"Home","title":"IPUMS.Dataset","text":"Dataset(;\n    dataTables=nothing,\n    geogLevels=nothing,\n    breakdownValues=nothing,\n    years=nothing,\n)\n\nThis function creates a new record of a Dataset given geographical levels, breakdown values and years.\n\nArguments\n\ndataTables::Vector{String}- A list of available data tables for this Dataset.\ngeogLevels::Vector{String}- A list of geographic levels available for the Dataset,(eg. \"county\",\"state\").\nbreakdownValues::Vector{String}- Breakdown values available for this grouping for the available Dataset.\nyears::Vector{String}- List of the years if data of multiple years are present.\n\nReturns\n\nThis function returns a new record of a Dataset giving the geographical levels, breakdown values and years.\n\nExamples\n\njulia> IPUMS.Dataset(dataTables =[\"1790_cPop\"],geogLevels =[ \"state\"],breakdownValues =[\"bs32.ge00\"],years = [\"1790\"])\n{\n  \"dataTables\": [\n    \"1790_cPop\"\n  ],\n  \"geogLevels\": [\n    \"state\"\n  ],\n  \"breakdownValues\": [\n    \"bs32.ge00\"\n  ],\n  \"years\": [\n    \"1790\"\n  ]\n}\n\nReferences\n\nTo know more about the Dataset type visit the links:\n\nhttps://developer.ipums.org/docs/v2/workflows/explore_metadata/nhgis/datasets/\nhttps://www.nhgis.org/frequently-asked-questions-faq#breakdowns\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DatasetFull","page":"Home","title":"IPUMS.DatasetFull","text":"DatasetFull(;\n    name=nothing,\n    description=nothing,\n    group=nothing,\n    sequence=nothing,\n    dataTables=nothing,\n    geogLevels=nothing,\n    hasMultipleDataTypes=nothing,\n    breakdowns=nothing,\n)\n\nThis function creates a dataset given a dataset description. This function is used to download data from the IPUMS website.\n\nArguments\n\nname::String- (Optional) The dataset identifier \ndescription::String- (Optional) a short description of the dataset\ngroup::String- (Optional) the group of dataset to which it belongs\nsequence::Int64- (Optional) the order of appearence of the dataset in the metadata API and extract\ndataTables::Vector{DataTableSimple}- (Optional) The list of the available datatable for the dataset\ngeogLevels::Vector{DatasetFullGeogLevelsInner}- (Optional) A list of the geographic levels available for the dataset\nhasMultipleDataTypes::Bool- (Optional) A boolean indicating if multiple data types exist for the dataset\nbreakdowns::DatasetFullBreakdowns- (Optional) List of breakdown available for the dataset\n\nReturns\n\nThe function returns a new DatasetFull object.\n\nExamples\n\njulia> IPUMS.DatasetFull(name = \"2010_SF1a\",\n                         description = \"SF 1a - P & H Tables [Blocks & Larger Areas]\",\n                         group = \"2010 Census\",\n                         sequence = 4802,\n                         dataTables = [IPUMS.DataTableSimple(name = \"P1\",\n                                                             nhgisCode = \"H7V\",\n                                                             description = \"Total Population\",\n                                                             sequence = 1)],\n                         geogLevels = [ IPUMS.DatasetFullGeogLevelsInner(name = \"nation\",\n                                        description = \"Nation\",\n                                        hasGeogExtentSelection = false)],\n                         hasMultipleDataTypes = false,\n                         breakdowns = IPUMS.DatasetFullBreakdowns(name = \"bs32\",\n                                                                  type = \"Spatial\",\n                                                                  description = \"Geographic Subarea (2010 Census and American Community Survey)\",\n                                                                  breakdownValues = [IPUMS.DatasetFullBreakdownsBreakdownValuesInner(name = \"bs32.ge00\",\n                                                                                                           description = \"Total area\")]))\n\n# Output\n\n{                                                                                                                                                  \n  \"name\": \"2010_SF1a\",                                                                                                                             \n  \"description\": \"SF 1a - P & H Tables [Blocks & Larger Areas]\",                                                                                   \n  \"group\": \"2010 Census\",                                                                                                                          \n  \"sequence\": 4802,                                                                                                                                \n  \"dataTables\": [                                                                                                                                  \n    {\n      \"name\": \"P1\",\n      \"nhgisCode\": \"H7V\",\n      \"description\": \"Total Population\",\n      \"sequence\": 1\n    }\n  ],\n  \"geogLevels\": [\n    {\n      \"name\": \"nation\",\n      \"description\": \"Nation\",\n      \"hasGeogExtentSelection\": false\n    }\n  ],\n  \"hasMultipleDataTypes\": false,\n  \"breakdowns\": {\n    \"name\": \"bs32\",\n    \"type\": \"Spatial\",\n    \"description\": \"Geographic Subarea (2010 Census and American Community Survey)\",\n    \"breakdownValues\": [\n      {\n        \"name\": \"bs32.ge00\",\n        \"description\": \"Total area\"\n      }\n    ]\n  }\n}\n\nReferences\n\nTo learn more about the DatasetFull type visit the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DatasetFullBreakdowns","page":"Home","title":"IPUMS.DatasetFullBreakdowns","text":"DatasetFullBreakdowns(;\n    name=nothing,\n    type=nothing,\n    description=nothing,\n    breakdownValues=nothing,\n    years=nothing,\n    geographicInstances=nothing,\n)\n\nThis function creates a dataset given the description of the data.\n\nArguments\n\nname::String - (Optional) The dataset identifier \ntype::String - (Optional) The type of dat in the dataset\ndescription::String - (Optional) a short description of the dataset\nbreakdownValues::Vector{DatasetFullBreakdownsBreakdownValuesInner} - (Optional) List of breakdown available for the dataset\nyears::Vector{String}- (Optional) List of the years if data of multiple years are present\ngeographicInstances::Vector{DatasetFullBreakdownsBreakdownValuesInner} - (Optional) List of geographical extents\n\nReturns\n\nThe function returns a new DatasetFullBreakdowns object.\n\nExamples\n\njulia> IPUMS.DatasetFullBreakdowns(name = \"bs32\",\n                                   type = \"Spatial\",\n                                   description = \"Geographic Subarea (2010 Census and American Community Survey)\",\n                                   breakdownValues = [IPUMS.DatasetFullBreakdownsBreakdownValuesInner(name = \"bs32.ge00\",\n                                                                                                           description = \"Total area\")],\n                                   years = [\"2010\"],\n                                   geographicInstances = [IPUMS.DatasetFullBreakdownsBreakdownValuesInner(name = \"010\",\n                                                                                                           description = \"Alabama\")])\n\n# Output\n\n{\n  \"name\": \"bs32\",\n  \"type\": \"Spatial\",\n  \"description\": \"Geographic Subarea (2010 Census and American Community Survey)\",\n  \"breakdownValues\": [\n    {\n      \"name\": \"bs32.ge00\",\n      \"description\": \"Total area\"\n    }\n  ],\n  \"years\": [\n    \"2010\"\n  ],\n  \"geographicInstances\": [\n    {\n      \"name\": \"010\",\n      \"description\": \"Alabama\"\n    }\n  ]\n}\n\nReferences\n\nTo find out more about the Dataset type visit the IPUMS Developer Docs.\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DatasetFullBreakdownsBreakdownValuesInner","page":"Home","title":"IPUMS.DatasetFullBreakdownsBreakdownValuesInner","text":"DatasetFullBreakdownsBreakdownValuesInner(;\n    name=nothing,\n    description=nothing,\n)\n\nInner constructor representing the variables within a DatasetFull object.\n\nArguments\n\nname::String - (Optional) The dataset identifier \ndescription::String - (Optional) a short description of the dataset\n\nReturns\n\nThis function returns an inner constructor for an DatasetFullBreakdownsBreakdownValuesInner object. This object is used in constructing a DatasetFull object.\n\nExamples\n\njulia> IPUMS.DatasetFullBreakdownsBreakdownValuesInner(name = \"1790_cPop\",\n                                                       description = \"1790 Census: Population Data [US, States & Counties]\")\n\n# Output\n\n{\n  \"name\": \"1790_cPop\",\n  \"description\": \"1790 Census: Population Data [US, States & Counties]\"\n}\n\nReferences\n\nTo find out more about the Dataset type visit the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DatasetFullGeogLevelsInner","page":"Home","title":"IPUMS.DatasetFullGeogLevelsInner","text":"DatasetFullGeogLevelsInner(;\n    name=nothing,\n    description=nothing,\n    hasGeogExtentSelection=nothing,\n)\n\nThis function gives the geographical information about data and its description.\n\nArguments\n\nname::String- (Optional) The dataset identifier \ndescription::String- (Optional) A short description of the dataset\nhasGeogExtentSelection::Bool- (Optional) boolean indicating if the dataset has geogrphical extent\n\nReturns\n\nThe function returns a DatasetFullGeogLevelsInner object with geographic information related to a dataset.\n\nExamples\n\njulia> IPUMS.DatasetFullGeogLevelsInner(name = \"1790_cPop\",\n                                        description = \"1790 Census: Population Data [US, States & Counties]\",\n                                        hasGeogExtentSelection = 1)\n\n# Output\n\n{\n  \"name\": \"1790_cPop\",\n  \"description\": \"1790 Census: Population Data [US, States & Counties]\",\n  \"hasGeogExtentSelection\": true\n}\n\n\nReferences\n\nTo find out more about the DatasetFullGeogLevelsInner` visit the link IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.DatasetSimple","page":"Home","title":"IPUMS.DatasetSimple","text":"DatasetSimple(;\n    name=nothing,\n    description=nothing,\n    group=nothing,\n    sequence=nothing,\n)\n\nThis function creates a dataset reference with a provided name, description, group, and sequence.\n\nArguments\n\nname::String- (Optional) The dataset identifier \ndescription::String- (Optional) A short description of the dataset\ngroup::String- (Optional) The group of datasets to which this dataset belongs.\nsequence::Int64- (Optional) The order in which the dataset will appear in the metadata API and extracts.\n\nReturns\n\nThis function returns a DatasetSimple object with the properties specified by the function arguments.\n\nExamples\n\njulia> IPUMS.DatasetSimple(name = \"1790_cPop\",\n                           description = \"1790 Census: Population Data [US, States & Counties]\",\n                           group = \"1790 Census\",\n                           sequence =  101)\n\n# Output\n\n{\n  \"name\": \"1790_cPop\",\n  \"description\": \"1790 Census: Population Data [US, States & Counties]\",\n  \"group\": \"1790 Census\",\n  \"sequence\": 101\n}\n\nReferences\n\nTo find out more about the Dataset type visit IPUMS API Dataset\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.Error","page":"Home","title":"IPUMS.Error","text":"Error(;\n    type=nothing,\n    status=nothing,\n    detail=nothing,\n)\n\nThis function send an error message \n\nArguments\n\n-type::Int64- Gives the type of error\n\nstatus::String- Gives the status of the error\ndetail::String- Gives the details of the error \n\nReturns\n\nReturns errors giving details\n\nExamples\n\njulia> IPUMS.Error(type =001, status = \"aaa \",detail = \"abc\" )\n{\n  \"type\": 1,\n  \"status\": \"aaa \",\n  \"detail\": \"abc\"\n}\n\nReferences\n\nTo know more about errors see:\n\nhttps://developer.ipums.org/docs/v2/reference/nhgis/\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.IPUMSAPI-Tuple{String, Dict}","page":"Home","title":"IPUMS.IPUMSAPI","text":"IPUMSAPI(url::String, headers::Dict)\n\nCreate an IPUMS API object for querying the IPUMS server.\n\nNOTE: If you need more control of how the connection to the server is made, consider using the OpenAPI.jl package and creating an Client object that you can pass into IPUMSAPI() directly.\n\nArguments\n\nurl::String â€“ The URL of the server. This is the base URL that will be used for all API calls.\nheaders::Dict â€“ A dictionary of HTTP headers to be sent with all API calls.\n\nReturns\n\napi::IPUMSAPI â€“ An API object that can be passed to all IPUMS.jl methods that require an API object.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.IPUMSSource","page":"Home","title":"IPUMS.IPUMSSource","text":"IPUMSSource(\n    proj_name::String, \n    url_name::String, \n    collection_type::String, \n    code_for_api::String = \"\", \n    api_support::Bool = false, \n    home_url::String = \"\"\n)\n\nA struct representing sources that IPUMS provides.\n\nArguments\n\nproj_name::String - Name of the IPUMS project.\nurl_name::String - Name of the project as used in that project's website URL.\ncollection_type::String - Either \"microdata\" or \"aggregate data\" indicating the type of data this collection provides.\n\nKeyword Arguments\n\ncode_for_api::String - The name of the project used when interacting with the IPUMS API (for collections that are supported by the API). (Default: \"\")\napi_support::Bool - Logical indicating whether the collection is supported by the IPUMS API. (Default: false)\nhome_url::String - URL for the project's homepage. (Default: \"\")\n\nReturns\n\nIPUMSSource object specifying the previous parameters\n\nExample\n\njulia> IPUMSSource(\n    proj_name = \"IPUMS USA\",\n    url_name = \"usa\",\n    collection_type = \"microdata\",\n    api_support = true\n)\n\nIPUMS.IPUMSSource(\"IPUMS USA\", \"usa\", \"microdata\", \"\", true, \"\")\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.Shapefile","page":"Home","title":"IPUMS.Shapefile","text":"Shapefile(;\n    name=nothing,\n    year=nothing,\n    geographicLevel=nothing,\n    extent=nothing,\n    basis=nothing,\n    sequence=nothing,\n)\n\nThis function creates a reference to an NHGIS shapefile for an IPUMS dataset.\n\nAttributes\n\nname::String- (Optional) The unique identifier of the shapefile.\nyear::String- (Optional) The survey year in which the file's represented areas were used for tabulations.\ngeographicLevel::String- (Optional) The geographic level of the shapefile.\nextent::String- (Optional) The geographic extent which is covered by the shapefile.\nbasis::String- (Optional) The derivation source of the shapefile.\nsequence::Int64- (Optional) The order the shapefile in which appears in the metadata API.\n\nReturns\n\nThis function returns a Shapefile object containing the attributes specified in the function arguments.\n\nExamples\n\njulia> IPUMS.Shapefile(name = \"base.tl2000.nongen.us_state_1790\",\n                       year = \"1790\",\n                       geographicLevel = \"state\",\n                       extent = \"united states\",\n                       basis = \"2000 tiger/line +\",\n                       sequence =  1)\n\n# Output\n\n{\n  \"name\": \"base.tl2000.nongen.us_state_1790\",\n  \"year\": \"1790\",\n  \"geographicLevel\": \"state\",\n  \"extent\": \"united states\",\n  \"basis\": \"2000 tiger/line +\",\n  \"sequence\": 1\n}\n\nReferences\n\nAdditional information about this object is available in the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.TimeSeriesTable","page":"Home","title":"IPUMS.TimeSeriesTable","text":"TimeSeriesTable(;\n    geogLevels=nothing,\n    years=nothing,\n)\n\nThis function creates a table record with a given geographical level and year information.\n\nKeyword Arguments\n\ngeogLevels::Vector{String} - A vector containing geographical levels, (eg.\"state\", \"county\"), for the Time Series Table\nyears::Vector{String} - A list of years for this Time Series Table.\n\nReturns\n\nThis function returns a Time Series Table record giving the geographical level and the years to which the data are referring. \n\nExamples\n\njulia> IPUMS.TimeSeriesTable(geogLevels=[\"state\"], years =[\"1790\"])\n{\n  \"geogLevels\": [\n    \"state\"\n  ],\n  \"years\": [\n    \"1790\"\n  ]\n}\n\nReferences\n\nTo find additional information on the Time Series Table, please refer to: \n\nhttps://developer.ipums.org/docs/v2/workflows/exploremetadata/nhgis/timeseries/)\nhttps://www.nhgis.org/time-series-tables\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.TimeSeriesTableFull","page":"Home","title":"IPUMS.TimeSeriesTableFull","text":"TimeSeriesTableFull(;\n    name=nothing,\n    description=nothing,\n    geographicIntegration=nothing,\n    sequence=nothing,\n    timeSeries=nothing,\n    geogLevels=nothing,\n)\n\nThis function returns an object containing the attributes for downloading a Time Series Table.\n\nArguments\n\nname::String- (Optional) The unique variable identifier for the time series table, (eg. \"A00\", \"OWNERSHP\").\ndescription::String- (Optional) A short description of the time series variable referred to in name.\ngeographicIntegration::String- (Optional) Specifies how the variable accounts for changes in geographic boundaries over time, (eg. \"Nominal\").\nsequence::Float32- (Optional) The order of appearence of the dataset in the metadata API and extract.\ntimeSeries::Vector{TimeSeriesTableFullTimeSeriesInner}- (Optional) A list of time series records corresponding to the variable specified in name.\ngeogLevels::Vector{TimeSeriesTableFullTimeSeriesInner}-  (Optional) A list of geographic levels available for this time series table.\n\nReturns\n\nThis function return a TimeSeriesTableFull object containing the variable name, description, time series, and geographical information of the data.\n\nExamples\n\njulia> IPUMS.TimeSeriesTableFull(name=\"A00\",\n                                description= \"Total Population\", \n                                geographicIntegration= \"Nominal\", \n                                sequence= 0.01, \n                                timeSeries=[IPUMS.TimeSeriesTableFullTimeSeriesInner(name = \"AA\",\n                                                                                     description = \"Persons: Total\",\n                                                                                     sequence = 1 )], \n                                geogLevels= [ IPUMS.TimeSeriesTableFullTimeSeriesInner(name = \"state\",\n                                                                                       description = \"State\",\n                                                                                       sequence = 4 ), \n                                              IPUMS.TimeSeriesTableFullTimeSeriesInner(name = \"county\",\n                                                                                       description = \"State--County\",\n                                                                                       sequence = 25 )])\n# Output\n{\n  \"name\": \"A00\",\n  \"description\": \"Total Population\",\n  \"geographicIntegration\": \"Nominal\",\n  \"sequence\": 0.01,\n  \"timeSeries\": [\n    {\n      \"name\": \"AA\",\n      \"description\": \"Persons: Total\",\n      \"sequence\": 1\n    }\n  ],\n  \"geogLevels\": [\n    {\n      \"name\": \"state\",\n      \"description\": \"State\",\n      \"sequence\": 4\n    },\n    {\n      \"name\": \"county\",\n      \"description\": \"State--County\",\n      \"sequence\": 25\n    }\n  ]\n}\n\n\nReferences\n\nFor additional information please refer to the following sources:\n\nhttps://developer.ipums.org/docs/v2/workflows/exploremetadata/nhgis/timeseries/\nhttps://www.nhgis.org/time-series-tables\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.TimeSeriesTableFullTimeSeriesInner","page":"Home","title":"IPUMS.TimeSeriesTableFullTimeSeriesInner","text":"TimeSeriesTableFullTimeSeriesInner(;\n    name=nothing,\n    description=nothing,\n    sequence=nothing,\n)\n\nThis function creates a reference to an IPUMS Time Series table. \n\nArguments\n\nname::String- (Optional) The unique identifier of the time series table.\ndescription::String- (Optional) A short description of the time series table.\nsequence::Int64- (Optional) The order in which the time series table will appear in the metadata API and extracts.\n\nReturns\n\nThis function returns a TimeSeriesTableFullTimeSeriesInner object that contains  information about a desired Time Series table.\n\nExamples\n\njulia> IPUMS.TimeSeriesTableFullTimeSeriesInner(name = \"1790_cPop\",\n                                                description =  \"1790 Census: Population Data [US, States & Counties]\",\n                                                sequence = 101)\n# Output\n\n{\n  \"name\": \"1790_cPop\",\n  \"description\": \"1790 Census: Population Data [US, States & Counties]\",\n  \"sequence\": 101\n}\n\nReferences\n\nAdditional information about the TimeSeriesTableFullTimeSeriesInnerobject is available in the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS.TimeSeriesTableSimple","page":"Home","title":"IPUMS.TimeSeriesTableSimple","text":"TimeSeriesTableSimple(;\n    name=nothing,\n    description=nothing,\n    geographicIntegration=nothing,\n    sequence=nothing,\n    timeSeries=nothing,\n    geogLevels=nothing,\n)\n\nThis function creates a new Simple Time Series Table record to support downloading of the corresponding data.\n\nArguments\n\nname::String- (Optional) The unique variable identifier for the time series table, (eg. \"A00\", \"OWNERSHP\").\ndescription::String- (Optional) A short description of the time series variable referred to in name.\ngeographicIntegration::String- (Optional) How does the variable value account for changes in geographic boundaries over time, (eg. \"Nominal\").\nsequence::Float32- (Optional) The order of appearence of the dataset in the metadata API and extract.\ntimeSeries::Vector{String}- (Optional) A list of time series records corresponding to the variable specified in name.\ngeogLevels::Vector{String}- (Optional) A list of geographic levels available for this time series table.\n\nReturns\n\nThis function returns a new TimeSeriesTableSimple object.\n\nExamples\n\njulia> IPUMS.TimeSeriesTableSimple(name = \"A00\",\n                                   description = \"Total Population\",\n                                   geographicIntegration = \"Nominal\",\n                                   sequence = 0.01,\n                                   timeSeries = [\"1790\", \"1800\"],\n                                   geogLevels = [\"state\", \"county\"] )\n\n# Output\n\n{\n  \"name\": \"A00\",\n  \"description\": \"Total Population\",\n  \"geographicIntegration\": \"Nominal\",\n  \"sequence\": 0.01,\n  \"timeSeries\": [\n    \"1790\",\n    \"1800\"\n  ],\n  \"geogLevels\": [\n    \"state\",\n    \"county\"\n  ]\n}\n\n\nReferences\n\nTo find out more about the TimeSeriesTableSimple type visit the IPUMS Developer Docs\n\n\n\n\n\n","category":"type"},{"location":"#IPUMS._check_that_file_exists-Tuple{String}","page":"Home","title":"IPUMS._check_that_file_exists","text":"_check_that_file_exists(filepath::String)\n\nThis is an internal function and checks whether the provided file exists or not. \n\nArguments\n\nfilepath::String - A file path that the user wishes to parse. The file must be                   an existing XML file.\n\nReturns\n\nThe function returns nothing if the file exists. If the file does not exist,      then the function raises an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._check_that_file_is_dat-Tuple{String}","page":"Home","title":"IPUMS._check_that_file_is_dat","text":"_check_that_file_is_dat(filepath::String)\n\nThis is an internal function and checks whether the provided file is a DAT     file. All IPUMS extract data files should be in DAT format.\n\nArguments\n\nfilepath::String - A file path that the user wishes to import. The file must be                   a DAT file.\n\nReturns\n\nThe function returns nothing if the file is a DAT file. If the file is not      a DAT file, then the function raises an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._check_that_file_is_xml-Tuple{String}","page":"Home","title":"IPUMS._check_that_file_is_xml","text":"_check_that_file_is_xml(filepath::String)\n\nThis is an internal function and checks whether the provided file is an XML     file. All DDI files should be in XML format.\n\nArguments\n\nfilepath::String - A file path that the user wishes to parse. The file must be                   an XML file.\n\nReturns\n\nThe function returns nothing if the file is an XML file. If the file is not      an XML file, then the function raises an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._df_loader_inplace_svector!-NTuple{6, Any}","page":"Home","title":"IPUMS._df_loader_inplace_svector!","text":"_df_loader_inplace_svector!(df, extract_filepath, array_cache, range_vec, p_dtype, p_dcml)\n\nThis is an internal function to support the parsing of the fixed width \nformat of the IPUMS datafile. The file contains only numbers and absolutely\nno text. This function determines--based upon DDI metadata--whether a \nspecific text input is designated as an integer or floating point number,\nand then parses that value accordingly.\n\nArguments\n\ndf::DataFrame - An empty dataframe to hold the output of the parsing operation.\nextract_filepath::String - The string path location for the IPUMS data file.\narray_cache::Array{Number} - A cache array to hold the parsed data from a line of the data file. \nrange_vec::Array{UnitRange{Int64}} - A vector of ranges that correspond to the variables in a line of the data file.\np_dtype::Array{DataType} - An array of datatypes for each variable in a line of the data file.\np_dcml::Array{Int64} - An array of integers corresponding to the number of decimal values in a parsed variable.\n\nReturns\n\nThis function does not return any output. Instead this variable modifies the \nprovided dataframe in-place.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._get_var_metadata_from_ddi!-Tuple{IPUMS.DDIInfo}","page":"Home","title":"IPUMS._get_var_metadata_from_ddi!","text":"_get_var_metadata_from_ddi!(ddi::DDIInfo)\n\nThis is an internal function and not meant for the public API. This function     iterates over the variable nodes in the DDI XML file nodes. The data     from each variable node is collected in a DDIVariable object, and a      vector of those DDIVariable object is save in the DDIInfo object.\n\nArguments\n\nddi::DDIInfo - A DDIInfo object that will retain all of the parsed metadata.\n\nReturns\n\nThe function return the original DDIInfo object with updated data in the  attributes.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._parse_data-Union{Tuple{T}, Tuple{SubString{String}, Type{T}, Int64}} where T<:AbstractFloat","page":"Home","title":"IPUMS._parse_data","text":"_parse_data(strnum::SubString{String}, dtype::Type{T}, decimals::Int64) where {T <: AbstractFloat}\n\nThis is an internal function to support the parsing of the fixed width \nformat of the IPUMS datafile. The file contains only numbers and absolutely\nno text. This function determines--based upon DDI metadata--whether a \nspecific text input is designated as an integer or floating point number,\nand then parses that value accordingly.\n\nThis function is specialized to work on float values. Float values in this\nfile type are coded as integers. However, the DDI information also contains\nthe number of decimals for the float fields. This function will parse a \nfloat number from the integer string in the data file.\n\nArguments\n\nstrnum::SubString{String} - A string that may contain some numeric data encoded as text.\ndtype::Type{T} - The datatype that should be applied in the parsing of string number.\ndecimals::Int64 - The number of decimal values to include in a floating point number.\n\nReturns\n\nThis function returns the parsed float number that corresponds to the input string.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._parse_data-Union{Tuple{T}, Tuple{SubString{String}, Type{T}, Int64}} where T<:Integer","page":"Home","title":"IPUMS._parse_data","text":"_parse_data(strnum::SubString{String}, dtype::Type{T}, decimals::Int64) where {T <: Integer}\n\nThis is an internal function to support the parsing of the fixed width \nformat of the IPUMS datafile. The file contains only numbers and absolutely\nno text. This function determines--based upon DDI metadata--whether a \nspecific text input is designated as an integer or floating point number,\nand then parses that value accordingly.\n\nThis function is specialized for integer values. As the fixed width data\nformat encodes both floats and integers as strings, the parsing function \nmust first determine the datatype of each entry and parse that entry accordingly.\nThis function parses string values into their corresponding integer values.\n\nArguments\n\nstrnum::SubString{String} - A string that may contain some numeric data encoded as text.\ndtype::Type{T} - The datatype that should be applied in the parsing of string number.\ndecimals::Int64 - The number of decimal values to include in a floating point number.                       Integers do not have any decimal values, hence this field is                        ignored for this function.\n\nReturns\n\nThis function returns the parsed integer value that corresponds to the input string.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._read_ddi_and_parse_extract_level_metadata!-Tuple{IPUMS.DDIInfo}","page":"Home","title":"IPUMS._read_ddi_and_parse_extract_level_metadata!","text":"_read_ddi_and_parse_extract_level_metadata!(ddi::DDIInfo)\n\nThis is an internal function and not meant for the public API. This function  parses the DDI XML file and captures the file-level metadata.\n\nArguments\n\nddi::DDIInfo - A DDIInfo object that will retain all of the parsed metadata.\n\nReturns\n\nThe function return the original DDIInfo object with updated data in the  attributes.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS._string_to_num-Tuple{SubString{String}}","page":"Home","title":"IPUMS._string_to_num","text":"_string_to_num(x::SubString{String})\n\nThis is an internal function and not meant for the public API. This function     takes a text string and returns only the numeric portion of the string.      For example in the input is \"Codes999999\", the function will return an     Int64 with the value 999999.\n\nArguments\n\nx::SubString{String} - A string that may contain some numeric data mixed with text.\n\nReturns\n\nThis function returns the numeric part of the string, coded as an Int64 datatype.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.basepath-Tuple{Type{IPUMSAPI}}","page":"Home","title":"IPUMS.basepath","text":"The default API base path for APIs in IPUMSAPI. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.extract_download-Tuple{Any, Any, Any}","page":"Home","title":"IPUMS.extract_download","text":"function extract_download(\n    api::IPUMSAPI, \n    extract_number::Int, \n    collection::String; \n    output_path::String = pwd(), \n    codebook_name::String = nothing, \n    table_data_name::String = nothing, \n    gis_data_name::String = nothing, \n    codebook::Bool = true, \n    table_data::Bool = true, \n    gis_data::Bool = true\n)\n\nDownload files associated with a given IPUMS data extract.\n\nArguments\n\napi::IPUMSAPI â€“ An IPUMSAPI object to establish connection details.\nextract_number::Int â€“ extract ID assigned to the IPUMS data extract.\ncollection::String â€“ What IPUMS collection to be queried for the extract (options could include \"nhgis\", \"usa\", etc. corresponding to IPUMS NHGIS or NHGIS USA databases).\n\nKeyword Arguments\n\noutput_path::String â€“ The path (location on computer) to output all downloaded files (Default: current working directory).\ncodebook_name::String â€“ What the name of the codebook file should be (Default: `nothing).\ntable_data_name::String â€“ What the name of the table data file should be (Default: `nothing).\ngis_data_name::String â€“ What the name of the GIS file should be (Default: `nothing).\ncodebook::Bool â€“ true to download the codebook file for the extract; false to not download it (Default: true)\ntable_data::Bool â€“ true to download the table data file for the extract; false to not download it (Default: true)\ngis_data::Bool â€“ true to download the GIS file for the extract; false to not download it (Default: true)\n\nReturns\n\nThe path (location on computer) where the files were downloaded to. \n\nExamples\n\njulia> extract_download(api, 1, \"nhgis\"; output_path = \"file_downloads/\", codebook = false, gis_data_name = \"GIS_1\", table_data_name = \"DATA_1\")\n[ Info: Table data for Extract 1 downloaded to file_downloads/DATA_1.zip.\n[ Info: GIS data for Extract 1 downloaded to file_downloads/DATA_1.zip.\n\"file_downloads/\"\n\njulia> extract_download(api, 2, \"nhgis\", output_path=\"file_downloads/\")\nâ”Œ Warning: Extract 2 has expired and the associated data cannot be downloaded any longer. If you would like to download the data for\n this extract, please resubmit the extract request associated with this extract again to create a new extract with the same data fro\nm this extract.\nâ”” @ IPUMS ~/FOSS/IPUMS.jl/src/apis/api_IPUMSAPI.jl:213\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.extract_info-Tuple{IPUMSAPI, Int64, String}","page":"Home","title":"IPUMS.extract_info","text":"extract_info(\n    api::IPUMSAPI,\n    extract_number::Int,\n    collection::String;\n    version::String = \"2\"\n)\n\nGet information about a specific data extract.\n\nArguments\n\napi::IPUMSAPI â€“ An IPUMSAPI object to establish connection details.\nextract_number::Int â€“ extract ID assigned to the IPUMS data extract.\ncollection::String â€“ What IPUMS collection to be queried for the extract (options could include \"nhgis\", \"usa\", etc. corresponding to IPUMS NHGIS or NHGIS USA databases).\n\nKeyword Arguments\n\nversion::String â€“ What version of the IPUMS API to use (Default: \"2\")\n\nReturns\n\nmetadata::{String, Any} â€“ A dictionary containing metadata about the queried data extract:\n\nnumber â€“ The IPUMS data extract ID\ntimeSeriesTableLayout â€“ Layout of the the time series tables. Can be one of the following:\n\"time_by_column_layout\" (wide format, default): rows correspond to geographic units, columns correspond to different times in the time series\n\"time_by_row_layout\" (long format): rows correspond to a single geographic unit at a single point in time\n\"time_by_file_layout\": data for different times are provided in separate files\ngeographicExtents â€“ Vector of geographic extents to use for all of the datasets in the extract definition.\nstatus â€“ The current status of the IPUMS data extract (such as \"completed\" for a request being done). Potential results include:\n\"queued\"\n\"started\"\n\"produced\"\n\"canceled\"\n\"failed\"\n\"completed\"\ndescription â€“ The associated description about the data extract.\ntimeSeriesTables â€“ Vector of time series tables for use in the extract definition.\n\nversion â€“ What version of the API is being used for handling this request.\ndataFormat â€“ The desired format of the extract data file.\n\"csv_no_header\" (default) includes only a minimal header in the first row\n\"csv_header\" includes a second, more descriptive header row.\n\"fixed_width\" provides data in a fixed width format\nbreakdownAndDataTypeLayout â€“ The desired layout of any datasets that have multiple data types or breakdown values. Potential values can be:\n\"single_file\" (default) keeps all data types and breakdown values in one file\n\"separate_files\" splits each data type or breakdown value into its own file\nshapefiles â€“ Report what shapefiles were requested and used in this extract.\ndownloadUrls â€“ URLs to download the data from the requested extract.\ndatasets â€“ What datasets were used in this extract.\ncollection â€“ What collection is being queried.\n\nNOTE: To be ready to download, an extract must have a completed status. However, some requests that are completed may still be unavailable for download, as extracts expire and are removed from IPUMS servers after a set period of time (72 hours for microdata collections, 2 weeks for IPUMS NHGIS). If an extract has expired, a warning from this function will be emitted.\n\ndefn::IPUMS.DataExtractDefinition â€“ The associated data extract definition that was used to generate this extract.\n\nmsg::OpenAPI.Clients.ApiResponse â€“ The response message from the IPUMS API.\n\nExamples\n\njulia> metadata, defn, msg = extract_info(api, 1, \"nhgis\", \"2\");\n\njulia> metadata\nDict{String, Any} with 13 entries:\n  \"number\"        => 1\n  \"timeSeriesTabâ€¦ => \"time_by_file_layout\"\n  \"geographicExtâ€¦ => [\"010\"]\n  \"status\"        => \"completed\"\n  \"description\"   => \"example extract request\"\n  \"timeSeriesTabâ€¦ => Dict{String, TimeSeriesTable}â€¦\n  \"version\"       => 2\n  \"dataFormat\"    => \"csv_no_header\"\n  \"breakdownAndDâ€¦ => \"single_file\"\n  \"shapefiles\"    => [\"us_state_1790_tl2000\"]\n  \"downloadUrls\"  => Dict(\"codebookPreview\"=>\"httpâ€¦\n  \"datasets\"      => Dict{String, Dataset}(\"2000_Sâ€¦\n  \"collection\"    => \"nhgis\"\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.extract_list-Tuple{IPUMSAPI, String}","page":"Home","title":"IPUMS.extract_list","text":"extract_list(\n    api::IPUMSAPI, \n    collection::String;\n    version::String = \"2\", \n    extracts::Int64 = 10, \n    _mediaType=nothing\n)\n\nGet a list of recent data extracts.\n\nNOTE: This function emits warnings when returned extracts are expired.\n\nArguments\n\napi::IPUMSAPI â€“ An IPUMSAPI object to establish connection details.\ncollection::String â€“ What IPUMS collection to be queried for the extract (options could include \"nhgis\", \"usa\", etc. corresponding to IPUMS NHGIS or IPUMS USA databases). \n\nKeyword Arguments\n\nversion::String â€“ What version of the IPUMS API to use (Default: \"2\").\nextracts::Int64 â€“ Starting from the newest extract, get the most recent desired number of extracts (Default: \"10\").\n\nReturns\n\nVector{DataExtract} â€“ a vector of DataExtract objects that contains the relevant extract number (number), its IPUMS status (status), the definition used to generate the associated definition (extractDefinition), and links to download the extract's data (downloadLinks).\n\nExamples\n\njulia> res = extract_list(api, \"nhgis\")\nâ”Œ Warning: Extract 1 has expired and the associated data cannot be downloaded any longer. If you would like to download the data for this extract, please resubmit the extract request associated with this extract again to create a new extract with the same data from this extract.\nâ”” @ IPUMS \n2-element Vector{IPUMS.DataExtract}:\n {\n  \"extractDefinition\": {\n    #=\n    ...\n    Extract definition details here\n    ...\n    =#\n  },\n  \"number\": 2,\n  \"status\": \"completed\",\n  \"downloadLinks\": {\n    \"codebookPreview\": \"nhgis0002_csv_PREVIEW.zip\",\n    \"tableData\": \"nhgis0002_csv.zip\",\n    \"gisData\": \"nhgis0002_shape.zip\"\n  }\n}\n\n {\n  \"extractDefinition\": {\n    #=\n    ...\n    Extract definition details here\n    ...\n    =#\n  },\n  \"number\": 1,\n  \"status\": \"completed\",\n  \"downloadLinks\": {}\n}\n\nTIP: If you want to record all the data extracts that are expired, you can loop through each of the returned extracts and check if the downloadLinks field is empty. If it is, that means it is expired.\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.extract_submit","page":"Home","title":"IPUMS.extract_submit","text":"extract_submit(\n    api::IPUMSAPI, \n    collection::String, \n    extract_definition::String = nothing; \n    version::String = \"2\", \n    _mediaType=nothing\n)\n\nSubmit an extract definition to IPUMS for IPUMS to generate a data extract with requested data.\n\nArguments\n\napi::IPUMSAPI â€“ An IPUMSAPI object to establish connection details.\ncollection::String â€“ What IPUMS collection to be queried for the extract (options could include \"nhgis\", \"usa\", etc. corresponding to IPUMS NHGIS or IPUMS USA databases). \nextract_definition::String â€“ The location of a file storing the extract definition you want to submit.\n\nKeyword Arguments\n\nversion::String â€“ What version of the IPUMS API to use (Default: \"2\").\n\nReturns\n\nDataExtractPostResponse â€“ Upon a successful submission, this object will contain a copy of the extract definition submitted, the extract ID, its status, and any relevant download links.\n\nExamples\n\njulia> res = extract_submit(api, \"nhgis\", my_extract_definition_file)\n{\n  \"extractDefinition\": {\n    #=\n    ...\n    Extract definition details here\n    ...\n    =#\n  },\n  \"number\": 4,\n  \"status\": \"queued\",\n  \"downloadLinks\": {}\n}\n\njulia> res = extract_submit(api, \"nhgis\", \"fake_file.json\")\n[ Info: The value you provided for the argument `extract_definition` (\"fake_file.json\") is not a valid filepath. Please update the path to your data extract.\nâ”Œ Error: ArgumentError(\"invalid JSON at byte position 1 while parsing type JSON3.False: InvalidChar\\nfake_file.json\\n\")\nâ”” @ IPUMS \nâ”Œ Error: The extract definition submission request was not successful. Please review your extract definition and try again.\nâ”” @ IPUMS \n\n\n\n\n\n","category":"function"},{"location":"#IPUMS.ipums_data_collections-Tuple{}","page":"Home","title":"IPUMS.ipums_data_collections","text":"ipums_data_collections()\n\nList IPUMS data collections with their corresponding codes used by the IPUMS API.  Unlisted data collections are not yet supported by the IPUMS API. \n\nReturns\n\nDataFrame with four columns containing the full collection name, the type of data the collection provides, the collection code used by the IPUMS API, and the status of API support for the collection.\n\nExample\n\njulia> ipums_data_collections()\n\n Row â”‚ collection_name      collection_type  code_for_api  api_support \n     â”‚ String               String           String        Bool        \nâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   1 â”‚ IPUMS USA            microdata                             true\n   2 â”‚ IPUMS CPS            microdata                             true\n   3 â”‚ IPUMS International  microdata        ipumsi               true\n   ...\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.load_ipums_extract-Tuple{IPUMS.DDIInfo, String}","page":"Home","title":"IPUMS.load_ipums_extract","text":"load_ipums_extract(ddi::DDIInfo, extract_filepath::String)\n\nThis file will take in a parsed DDIInfo object and file path to an IPUMS\nDAT extract file, and returns a dataframe containing all of the data.\n\nArguments\n\nddi::DDIInfo - A DDIInfo object, which is the result of parsing a DDI metadata file.\nextract_filepath::String - The directory path to an IPUMS extract DAT file. \n\nReturns\n\nThis function outputs a Julia Dataframe that contains all of the data from \nthe IPUMS extract file. Further, the metadata fields of the Dataframe \ncontain the metadata parsed from the DDI file.\n\nExamples\n\nLet's assume we have an extract DDI file named my_extract.xml, and an extract file called my_extract.dat.\n\njulia> ddi = parse_ddi(\"my_extract.xml\");\njulia> df = load_ipums_extract(ddi, \"my_extract.dat\");\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_data_tables_get-Tuple{IPUMSAPI, String}","page":"Home","title":"IPUMS.metadata_nhgis_data_tables_get","text":"List all data_tables\n\nParams:\n\nversion::String (required)\npage_number::Int64\npage_size::Int64\n\nReturn: DataTableFull, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_datasets_dataset_data_tables_data_table_get-Tuple{IPUMSAPI, String, String, String}","page":"Home","title":"IPUMS.metadata_nhgis_datasets_dataset_data_tables_data_table_get","text":"Detailed data table view\n\nParams:\n\ndataset::String (required)\ndata_table::String (required)\nversion::String (required)\n\nReturn: DataTableFull, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_datasets_dataset_get-Tuple{IPUMSAPI, String, String}","page":"Home","title":"IPUMS.metadata_nhgis_datasets_dataset_get","text":"Detailed dataset view\n\nParams:\n\ndataset::String (required)\nversion::String (required)\n\nReturn: DatasetFull, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_datasets_get-Tuple{IPUMSAPI, String}","page":"Home","title":"IPUMS.metadata_nhgis_datasets_get","text":"List all datasets\n\nParams:\n\nversion::String (required)\npage_number::Int64\npage_size::Int64\n\nReturn: Vector{DatasetSimple}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_shapefiles_get-Tuple{IPUMSAPI, String}","page":"Home","title":"IPUMS.metadata_nhgis_shapefiles_get","text":"List all the shapefiles.\n\nParams:\n\nversion::String (required)\npage_number::Int64\npage_size::Int64\n\nReturn: Vector{Shapefile}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_time_series_tables_get-Tuple{IPUMSAPI, String}","page":"Home","title":"IPUMS.metadata_nhgis_time_series_tables_get","text":"List all time series tables\n\nParams:\n\nversion::String (required)\npage_number::Int64\npage_size::Int64\n\nReturn: Vector{TimeSeriesTableSimple}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.metadata_nhgis_time_series_tables_time_series_table_get-Tuple{IPUMSAPI, String, String}","page":"Home","title":"IPUMS.metadata_nhgis_time_series_tables_time_series_table_get","text":"Detailed time series table view\n\nParams:\n\ntimeseriestable::String (required)\nversion::String (required)\n\nReturn: Vector{TimeSeriesTableFull}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#IPUMS.parse_ddi-Tuple{String}","page":"Home","title":"IPUMS.parse_ddi","text":"parse_ddi(filepath::String)\n\nParses a valid IPUMS DDI XML file and returns a DDIInfo object containing  the IPUMS extract metadata. \n\nArguments\n\nfilepath::String â€“ A string containing the path to the IPUMS DDI XML file. \n\nReturns\n\nA DDIInfo object that contains all of the file-level and variable-level  metadata for the IPUMS extract.\n\nPlease check the documentation for DDIInfo for more information about this  specific object.\n\nExamples\n\nLet's assume we have an extract DDI file named my_extract.xml\n\njulia> typeof(parse_ddi(\"my_extract.xml\"))\nIPUMS.DDIInfo\n\n\n\n\n\n","category":"method"},{"location":"#OpenAPI.from_json-Tuple{Vector{IPUMS.DataExtract}, Any}","page":"Home","title":"OpenAPI.from_json","text":"This is a pirated method that supports the extract_list method in returning additional information about page_size, page_number, and generated URLs.\n\nTODO: Review if we want to replace extract_list's OpenAPI implementation with a manual implementation This would encompass dynamically building a URL based on the collection someone wants to use, the pagesize, the pagenumber, and execute the query.\n\n\n\n\n\n","category":"method"},{"location":"mission/#Missions","page":"Mission","title":"Missions","text":"","category":"section"}]
}
